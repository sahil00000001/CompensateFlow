{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThe Increment Process Automation System is a comprehensive web-based performance management platform designed for hierarchical organizations. This system manages annual employee performance reviews, ratings, and salary increments across a structured organizational hierarchy. The application supports role-based access control with five distinct levels (Founder, L1-L3 Managers, and Peers across four categories), ensuring appropriate data isolation and approval workflows.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\nThe client-side is built using **React 18** with **TypeScript** and utilizes modern tooling for development. The architecture follows component-based patterns with the following key decisions:\n\n- **Build Tool**: Vite for fast development and optimized production builds\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: React Query (TanStack Query) for server state management and caching\n- **UI Framework**: Radix UI primitives with custom styling via Tailwind CSS and shadcn/ui components\n- **Forms**: React Hook Form with Zod validation for type-safe form handling\n- **Styling**: Tailwind CSS with CSS variables for theming support\n\nThe component structure separates concerns into dashboard components, form components, layout components, and UI primitives, providing maintainable and reusable code.\n\n## Backend Architecture\nThe server-side uses **Node.js** with **Express.js** following a RESTful API pattern:\n\n- **Runtime**: Node.js with ESM modules\n- **Framework**: Express.js for HTTP server and routing\n- **Database Layer**: Drizzle ORM for type-safe database operations\n- **Authentication**: Replit's OpenID Connect (OIDC) with session management\n- **Email Service**: SendGrid for automated notifications\n- **File Structure**: Modular architecture with separate concerns for routes, storage, and services\n\nThe API provides endpoints for user management, review cycles, employee reviews, feedback collection, and dashboard analytics with role-based access controls.\n\n## Data Storage Solutions\nThe system uses **PostgreSQL** as the primary database with the following design decisions:\n\n- **ORM**: Drizzle ORM chosen for type safety and performance\n- **Database Provider**: Neon Database for serverless PostgreSQL hosting\n- **Schema Design**: Hierarchical user structure with referential integrity\n- **Session Storage**: PostgreSQL-backed sessions using connect-pg-simple\n- **Migration Strategy**: Drizzle Kit for schema migrations\n\nKey entities include users with hierarchical relationships, review cycles, employee reviews, feedback, meetings, appeals, and activity logs.\n\n## Authentication and Authorization\nAuthentication is handled through **Replit's OIDC integration** with the following security measures:\n\n- **Session Management**: Server-side sessions stored in PostgreSQL\n- **Role-Based Access**: Five-tier hierarchy with data isolation\n- **Route Protection**: Middleware-based authentication checks\n- **User Context**: React Query for client-side user state management\n\nThe system ensures data privacy by restricting access based on organizational hierarchy and user roles.\n\n# External Dependencies\n\n## Third-Party Services\n- **SendGrid**: Email service for automated notifications and communication\n- **Neon Database**: Serverless PostgreSQL hosting for production data storage\n- **Replit Authentication**: OpenID Connect provider for user authentication\n\n## Key Libraries\n- **Frontend**: React, React Query, React Hook Form, Radix UI, Tailwind CSS, Zod, Wouter\n- **Backend**: Express.js, Drizzle ORM, Passport.js, Express Session\n- **Database**: PostgreSQL with Neon serverless driver\n- **Development**: Vite, TypeScript, ESBuild for production builds\n\n## API Integrations\n- **Replit OIDC**: For secure user authentication and profile management\n- **SendGrid API**: For sending review notifications, meeting invitations, and appeal communications\n- **Neon Database API**: For serverless PostgreSQL connectivity and connection pooling","size_bytes":4099},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"scripts/seed-test-data.ts":{"content":"import { db } from '../server/db';\nimport { \n  users, \n  reviewCycles, \n  employeeReviews,\n  feedback,\n  activityLogs\n} from '../shared/schema';\n\nasync function seedTestData() {\n  console.log('🌱 Seeding test data...');\n\n  try {\n    // Create test users with hierarchical structure\n    console.log('Creating users...');\n    \n    // Founder (Harry)\n    const harry = await db.insert(users).values({\n      id: 'harry-founder-001',\n      email: 'harry@company.com',\n      firstName: 'Harry',\n      lastName: 'Founder',\n      role: 'founder',\n      department: 'Executive',\n      isActive: true,\n    }).returning();\n\n    // L1 Manager\n    const l1Manager = await db.insert(users).values({\n      id: 'l1-manager-001',\n      email: 'l1manager@company.com',\n      firstName: 'Alice',\n      lastName: 'L1Manager',\n      role: 'l1_manager',\n      department: 'Engineering',\n      managerId: harry[0].id,\n      isActive: true,\n    }).returning();\n\n    // L2 Managers\n    const l2Manager1 = await db.insert(users).values({\n      id: 'l2-manager-001',\n      email: 'l2manager1@company.com',\n      firstName: 'Bob',\n      lastName: 'L2Manager',\n      role: 'l2_manager',\n      department: 'Engineering',\n      managerId: l1Manager[0].id,\n      isActive: true,\n    }).returning();\n\n    const l2Manager2 = await db.insert(users).values({\n      id: 'l2-manager-002',\n      email: 'l2manager2@company.com',\n      firstName: 'Carol',\n      lastName: 'L2Manager',\n      role: 'l2_manager',\n      department: 'Design',\n      managerId: l1Manager[0].id,\n      isActive: true,\n    }).returning();\n\n    // L3 Managers\n    const l3Manager1 = await db.insert(users).values({\n      id: 'l3-manager-001',\n      email: 'l3manager1@company.com',\n      firstName: 'David',\n      lastName: 'L3Manager',\n      role: 'l3_manager',\n      department: 'Engineering',\n      managerId: l2Manager1[0].id,\n      isActive: true,\n    }).returning();\n\n    const l3Manager2 = await db.insert(users).values({\n      id: 'l3-manager-002',\n      email: 'l3manager2@company.com',\n      firstName: 'Eve',\n      lastName: 'L3Manager',\n      role: 'l3_manager',\n      department: 'Design',\n      managerId: l2Manager2[0].id,\n      isActive: true,\n    }).returning();\n\n    // Peers - Software Developers\n    const dev1 = await db.insert(users).values({\n      id: 'dev-001',\n      email: 'john.dev@company.com',\n      firstName: 'John',\n      lastName: 'Developer',\n      role: 'peer',\n      category: 'software_developer',\n      department: 'Engineering',\n      managerId: l3Manager1[0].id,\n      isActive: true,\n    }).returning();\n\n    const dev2 = await db.insert(users).values({\n      id: 'dev-002',\n      email: 'jane.dev@company.com',\n      firstName: 'Jane',\n      lastName: 'Developer',\n      role: 'peer',\n      category: 'software_developer',\n      department: 'Engineering',\n      managerId: l3Manager1[0].id,\n      isActive: true,\n    }).returning();\n\n    // ML Engineer\n    const mlEngineer = await db.insert(users).values({\n      id: 'ml-001',\n      email: 'mike.ml@company.com',\n      firstName: 'Mike',\n      lastName: 'MLEngineer',\n      role: 'peer',\n      category: 'ml_engineer',\n      department: 'Engineering',\n      managerId: l3Manager1[0].id,\n      isActive: true,\n    }).returning();\n\n    // QA Engineer\n    const qaEngineer = await db.insert(users).values({\n      id: 'qa-001',\n      email: 'sara.qa@company.com',\n      firstName: 'Sara',\n      lastName: 'QAEngineer',\n      role: 'peer',\n      category: 'qa_engineer',\n      department: 'Engineering',\n      managerId: l3Manager1[0].id,\n      isActive: true,\n    }).returning();\n\n    // UI/UX Developer\n    const uxDeveloper = await db.insert(users).values({\n      id: 'ux-001',\n      email: 'alex.ux@company.com',\n      firstName: 'Alex',\n      lastName: 'UXDeveloper',\n      role: 'peer',\n      category: 'ui_ux_developer',\n      department: 'Design',\n      managerId: l3Manager2[0].id,\n      isActive: true,\n    }).returning();\n\n    console.log('✅ Users created successfully');\n\n    // Create active review cycle\n    console.log('Creating review cycle...');\n    const reviewCycle = await db.insert(reviewCycles).values({\n      id: 'cycle-2024-annual',\n      name: '2024 Annual Performance Review',\n      startDate: new Date('2024-01-15'),\n      endDate: new Date('2024-06-15'),\n      selfAssessmentDeadline: new Date('2024-02-15'),\n      feedbackDeadline: new Date('2024-03-15'),\n      reviewDeadline: new Date('2024-04-15'),\n      meetingDeadline: new Date('2024-05-15'),\n      isActive: true,\n    }).returning();\n\n    console.log('✅ Review cycle created successfully');\n\n    // Create employee reviews for peers\n    console.log('Creating employee reviews...');\n    const peers = [dev1[0], dev2[0], mlEngineer[0], qaEngineer[0], uxDeveloper[0]];\n    \n    for (const peer of peers) {\n      await db.insert(employeeReviews).values({\n        employeeId: peer.id,\n        cycleId: reviewCycle[0].id,\n        status: 'self_assessment',\n        selfAssessmentData: {\n          currentCtc: '1200000',\n          expectedCtc: '1400000',\n          expectedIncrementPercentage: '15',\n          careerGoals: 'Looking to take on more technical leadership responsibilities and contribute to system architecture decisions.',\n          trainingNeeds: 'Advanced system design, leadership training',\n          workFromHomePreference: 'hybrid',\n          projectContributions: 'Led the development of the user authentication system, implemented OAuth integration, improved API performance by 30%.',\n          teamCollaboration: '4',\n          initiatives: 'Initiated weekly tech talks, mentored 2 junior developers, proposed and implemented code review process improvements.',\n          challenges: 'Faced challenges with legacy system integration, resolved by creating abstraction layers and incremental migration strategy.',\n          areasOfImprovement: 'Want to improve project management skills and learn more about cloud architecture patterns.',\n          categorySpecificFields: {\n            'Technical skills assessment': '4',\n            'Code quality metrics': '4',\n            'Bug resolution rate': '5',\n            'Feature delivery count': '4',\n          },\n          additionalComments: 'Excited about the upcoming projects and ready to take on more responsibilities.',\n        },\n      });\n    }\n\n    console.log('✅ Employee reviews created successfully');\n\n    // Create some sample 360-degree feedback\n    console.log('Creating sample feedback...');\n    const johnReview = await db.query.employeeReviews.findFirst({\n      where: (reviews, { eq }) => eq(reviews.employeeId, dev1[0].id),\n    });\n\n    if (johnReview) {\n      // Feedback from Jane (peer)\n      await db.insert(feedback).values({\n        reviewId: johnReview.id,\n        feedbackFromId: dev2[0].id,\n        technicalCompetence: '4',\n        communicationSkills: '5',\n        teamCollaboration: '5',\n        problemSolving: '4',\n        leadershipPotential: '4',\n        reliability: '5',\n        innovation: '4',\n        overallFeedback: 'John is an excellent team member who consistently delivers high-quality code. He has strong communication skills and is always willing to help teammates. His technical knowledge is impressive and he approaches problems methodically.',\n        strengths: 'Strong technical skills, excellent communication, reliable, great team player',\n        improvements: 'Could benefit from more exposure to system architecture and cloud technologies',\n        isAnonymous: true,\n      });\n\n      // Feedback from Mike (peer)\n      await db.insert(feedback).values({\n        reviewId: johnReview.id,\n        feedbackFromId: mlEngineer[0].id,\n        technicalCompetence: '4',\n        communicationSkills: '4',\n        teamCollaboration: '4',\n        problemSolving: '5',\n        leadershipPotential: '3',\n        reliability: '5',\n        innovation: '4',\n        overallFeedback: 'John has strong problem-solving abilities and writes clean, maintainable code. He contributes well to team discussions and is always ready to tackle challenging technical problems.',\n        strengths: 'Excellent problem-solving skills, writes clean code, handles complex technical challenges well',\n        improvements: 'Could take more initiative in proposing new solutions and improvements',\n        isAnonymous: true,\n      });\n    }\n\n    console.log('✅ Sample feedback created successfully');\n\n    // Create some activity logs\n    console.log('Creating activity logs...');\n    await db.insert(activityLogs).values([\n      {\n        userId: dev1[0].id,\n        action: 'self_assessment_completed',\n        description: 'Completed self-assessment for 2024 annual review',\n        relatedEntityType: 'review',\n        relatedEntityId: johnReview?.id,\n      },\n      {\n        userId: dev2[0].id,\n        action: 'feedback_submitted',\n        description: 'Submitted 360-degree feedback',\n        relatedEntityType: 'feedback',\n      },\n      {\n        userId: mlEngineer[0].id,\n        action: 'feedback_submitted',\n        description: 'Submitted 360-degree feedback',\n        relatedEntityType: 'feedback',\n      },\n    ]);\n\n    console.log('✅ Activity logs created successfully');\n    console.log('🎉 Test data seeding completed!');\n    console.log('\\nTest Users Created:');\n    console.log('👑 Founder: harry@company.com (Harry Founder)');\n    console.log('🏢 L1 Manager: l1manager@company.com (Alice L1Manager)');\n    console.log('📊 L2 Managers: l2manager1@company.com (Bob), l2manager2@company.com (Carol)');\n    console.log('👥 L3 Managers: l3manager1@company.com (David), l3manager2@company.com (Eve)');\n    console.log('💻 Developers: john.dev@company.com (John), jane.dev@company.com (Jane)');\n    console.log('🤖 ML Engineer: mike.ml@company.com (Mike)');\n    console.log('🧪 QA Engineer: sara.qa@company.com (Sara)');\n    console.log('🎨 UX Developer: alex.ux@company.com (Alex)');\n\n  } catch (error) {\n    console.error('❌ Error seeding data:', error);\n    process.exit(1);\n  }\n}\n\n// Run the seed function\nseedTestData().catch(console.error);","size_bytes":10090},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/emailService.ts":{"content":"import { MailService } from '@sendgrid/mail';\n\nif (!process.env.SENDGRID_API_KEY) {\n  throw new Error(\"SENDGRID_API_KEY environment variable must be set\");\n}\n\nconst mailService = new MailService();\nmailService.setApiKey(process.env.SENDGRID_API_KEY);\n\ninterface EmailParams {\n  to: string;\n  from: string;\n  subject: string;\n  text?: string;\n  html?: string;\n}\n\nexport async function sendEmail(params: EmailParams): Promise<boolean> {\n  try {\n    await mailService.send({\n      to: params.to,\n      from: params.from || 'noreply@company.com',\n      subject: params.subject,\n      text: params.text,\n      html: params.html,\n    });\n    return true;\n  } catch (error) {\n    console.error('SendGrid email error:', error);\n    return false;\n  }\n}\n\nexport async function sendReviewNotification(\n  to: string,\n  employeeName: string,\n  action: string,\n  deadline?: string\n): Promise<boolean> {\n  const subject = `Performance Review: ${action}`;\n  const html = `\n    <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n      <h2 style=\"color: #3B82F6;\">Performance Review Notification</h2>\n      <p>Hello,</p>\n      <p>This is a notification regarding the performance review for <strong>${employeeName}</strong>.</p>\n      <p><strong>Action Required:</strong> ${action}</p>\n      ${deadline ? `<p><strong>Deadline:</strong> ${deadline}</p>` : ''}\n      <p>Please log in to the system to take the required action.</p>\n      <br>\n      <p>Best regards,<br>HR Team</p>\n    </div>\n  `;\n\n  return await sendEmail({\n    to,\n    from: 'hr@company.com',\n    subject,\n    html,\n  });\n}\n\nexport async function sendMeetingInvitation(\n  to: string,\n  employeeName: string,\n  managerName: string,\n  meetingDate: string,\n  meetingLink?: string\n): Promise<boolean> {\n  const subject = `1:1 Performance Review Meeting - ${employeeName}`;\n  const html = `\n    <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n      <h2 style=\"color: #3B82F6;\">1:1 Performance Review Meeting</h2>\n      <p>Hello,</p>\n      <p>You have a scheduled 1:1 performance review meeting.</p>\n      <p><strong>Employee:</strong> ${employeeName}</p>\n      <p><strong>Manager:</strong> ${managerName}</p>\n      <p><strong>Date & Time:</strong> ${meetingDate}</p>\n      ${meetingLink ? `<p><strong>Meeting Link:</strong> <a href=\"${meetingLink}\">${meetingLink}</a></p>` : ''}\n      <p>Please ensure you are prepared for the meeting and have reviewed all relevant materials.</p>\n      <br>\n      <p>Best regards,<br>HR Team</p>\n    </div>\n  `;\n\n  return await sendEmail({\n    to,\n    from: 'hr@company.com',\n    subject,\n    html,\n  });\n}\n\nexport async function sendAppealNotification(\n  to: string,\n  employeeName: string,\n  managerName: string,\n  reason: string\n): Promise<boolean> {\n  const subject = `Appeal Request - ${employeeName}`;\n  const html = `\n    <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n      <h2 style=\"color: #F59E0B;\">Appeal Request Submitted</h2>\n      <p>Hello ${managerName},</p>\n      <p>An appeal request has been submitted by <strong>${employeeName}</strong>.</p>\n      <p><strong>Reason:</strong></p>\n      <p style=\"background-color: #F3F4F6; padding: 15px; border-radius: 5px;\">${reason}</p>\n      <p>Please review this appeal and take appropriate action in the system.</p>\n      <br>\n      <p>Best regards,<br>HR Team</p>\n    </div>\n  `;\n\n  return await sendEmail({\n    to,\n    from: 'hr@company.com',\n    subject,\n    html,\n  });\n}\n","size_bytes":3504},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { z } from \"zod\";\nimport { \n  insertEmployeeReviewSchema,\n  insertFeedbackSchema,\n  insertMeetingSchema,\n  insertAppealSchema,\n  insertReviewCycleSchema \n} from \"@shared/schema\";\nimport { sendReviewNotification, sendMeetingInvitation, sendAppealNotification } from \"./emailService\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Dashboard routes\n  app.get('/api/dashboard/stats', isAuthenticated, async (req: any, res) => {\n    try {\n      const cycle = await storage.getActiveReviewCycle();\n      if (!cycle) {\n        return res.json({ totalEmployees: 0, completedReviews: 0, pendingApprovals: 0, averageRating: 0 });\n      }\n\n      const stats = await storage.getReviewStats(cycle.id);\n      const pendingApprovals = await storage.getPendingApprovals(req.user.claims.sub);\n      \n      res.json({\n        ...stats,\n        pendingApprovals: pendingApprovals.length,\n      });\n    } catch (error) {\n      console.error(\"Error fetching dashboard stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  app.get('/api/dashboard/pending-actions', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      const pendingActions = [];\n\n      // Get pending approvals for managers\n      if (user.role === 'l1_manager' || user.role === 'l2_manager') {\n        const pendingApprovals = await storage.getPendingApprovals(userId);\n        pendingActions.push(...pendingApprovals.map(review => ({\n          type: 'approval',\n          data: review,\n        })));\n      }\n\n      // Get pending appeals\n      if (user.role === 'l2_manager' || user.role === 'founder') {\n        const pendingAppeals = await storage.getAppealsByManager(userId);\n        pendingActions.push(...pendingAppeals.filter(appeal => appeal.status === 'pending').map(appeal => ({\n          type: 'appeal',\n          data: appeal,\n        })));\n      }\n\n      res.json(pendingActions);\n    } catch (error) {\n      console.error(\"Error fetching pending actions:\", error);\n      res.status(500).json({ message: \"Failed to fetch pending actions\" });\n    }\n  });\n\n  app.get('/api/dashboard/recent-activities', isAuthenticated, async (req: any, res) => {\n    try {\n      const activities = await storage.getRecentActivities(10);\n      res.json(activities);\n    } catch (error) {\n      console.error(\"Error fetching recent activities:\", error);\n      res.status(500).json({ message: \"Failed to fetch recent activities\" });\n    }\n  });\n\n  app.get('/api/dashboard/analytics/rating-distribution', isAuthenticated, async (req: any, res) => {\n    try {\n      const cycle = await storage.getActiveReviewCycle();\n      if (!cycle) {\n        return res.json([]);\n      }\n\n      const distribution = await storage.getRatingDistribution(cycle.id);\n      res.json(distribution);\n    } catch (error) {\n      console.error(\"Error fetching rating distribution:\", error);\n      res.status(500).json({ message: \"Failed to fetch rating distribution\" });\n    }\n  });\n\n  app.get('/api/dashboard/analytics/department-performance', isAuthenticated, async (req: any, res) => {\n    try {\n      const cycle = await storage.getActiveReviewCycle();\n      if (!cycle) {\n        return res.json([]);\n      }\n\n      const performance = await storage.getDepartmentPerformance(cycle.id);\n      res.json(performance);\n    } catch (error) {\n      console.error(\"Error fetching department performance:\", error);\n      res.status(500).json({ message: \"Failed to fetch department performance\" });\n    }\n  });\n\n  // Review cycle management\n  app.post('/api/review-cycles', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (user?.role !== 'founder') {\n        return res.status(403).json({ message: \"Only founder can create review cycles\" });\n      }\n\n      const cycleData = insertReviewCycleSchema.parse(req.body);\n      const cycle = await storage.createReviewCycle(cycleData);\n      \n      res.status(201).json(cycle);\n    } catch (error) {\n      console.error(\"Error creating review cycle:\", error);\n      res.status(500).json({ message: \"Failed to create review cycle\" });\n    }\n  });\n\n  app.get('/api/review-cycles/active', isAuthenticated, async (req: any, res) => {\n    try {\n      const cycle = await storage.getActiveReviewCycle();\n      res.json(cycle);\n    } catch (error) {\n      console.error(\"Error fetching active review cycle:\", error);\n      res.status(500).json({ message: \"Failed to fetch active review cycle\" });\n    }\n  });\n\n  // Employee review management\n  app.get('/api/reviews/my-review', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const cycle = await storage.getActiveReviewCycle();\n      \n      if (!cycle) {\n        return res.status(404).json({ message: \"No active review cycle\" });\n      }\n\n      const review = await storage.getEmployeeReview(userId, cycle.id);\n      res.json(review);\n    } catch (error) {\n      console.error(\"Error fetching employee review:\", error);\n      res.status(500).json({ message: \"Failed to fetch employee review\" });\n    }\n  });\n\n  app.get('/api/reviews/current', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const cycle = await storage.getActiveReviewCycle();\n      \n      if (!cycle) {\n        return res.json(null);\n      }\n\n      const review = await storage.getEmployeeReview(userId, cycle.id);\n      \n      res.json({\n        cycleName: cycle.name,\n        selfAssessmentData: review?.selfAssessmentData || null,\n        status: review?.status || 'not_started',\n        reviewId: review?.id,\n      });\n    } catch (error) {\n      console.error(\"Error fetching current review:\", error);\n      res.status(500).json({ message: \"Failed to fetch current review\" });\n    }\n  });\n\n  app.post('/api/reviews/self-assessment', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const cycle = await storage.getActiveReviewCycle();\n      \n      if (!cycle) {\n        return res.status(404).json({ message: \"No active review cycle\" });\n      }\n\n      let review = await storage.getEmployeeReview(userId, cycle.id);\n      \n      if (!review) {\n        // Create new review if it doesn't exist\n        review = await storage.createEmployeeReview({\n          employeeId: userId,\n          cycleId: cycle.id,\n          status: 'self_assessment',\n        });\n      }\n\n      const updatedReview = await storage.updateEmployeeReview(review.id, {\n        selfAssessmentData: req.body,\n        status: 'feedback_collection',\n      });\n\n      // Log activity\n      await storage.logActivity({\n        userId,\n        action: 'self_assessment_completed',\n        description: 'Completed self-assessment',\n        relatedEntityType: 'review',\n        relatedEntityId: review.id,\n      });\n\n      res.json(updatedReview);\n    } catch (error) {\n      console.error(\"Error saving self-assessment:\", error);\n      res.status(500).json({ message: \"Failed to save self-assessment\" });\n    }\n  });\n\n  // 360-degree feedback\n  app.post('/api/feedback', isAuthenticated, async (req: any, res) => {\n    try {\n      const feedbackData = insertFeedbackSchema.parse({\n        ...req.body,\n        feedbackFromId: req.user.claims.sub,\n      });\n\n      const feedback = await storage.createFeedback(feedbackData);\n\n      // Log activity\n      await storage.logActivity({\n        userId: req.user.claims.sub,\n        action: 'feedback_submitted',\n        description: 'Submitted 360-degree feedback',\n        relatedEntityType: 'feedback',\n        relatedEntityId: feedback.id,\n      });\n\n      res.status(201).json(feedback);\n    } catch (error) {\n      console.error(\"Error creating feedback:\", error);\n      res.status(500).json({ message: \"Failed to create feedback\" });\n    }\n  });\n\n  app.get('/api/feedback/pending', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const cycle = await storage.getActiveReviewCycle();\n      \n      if (!cycle) {\n        return res.json([]);\n      }\n\n      const givenFeedback = await storage.getFeedbackByUser(userId, cycle.id);\n      // TODO: Implement logic to find pending feedback requests\n      \n      res.json([]);\n    } catch (error) {\n      console.error(\"Error fetching pending feedback:\", error);\n      res.status(500).json({ message: \"Failed to fetch pending feedback\" });\n    }\n  });\n\n  app.get('/api/feedback/targets', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      const cycle = await storage.getActiveReviewCycle();\n      \n      if (!cycle || !user) {\n        return res.json([]);\n      }\n\n      // Get team members for 360-degree feedback\n      const targets = [];\n      \n      if (user.role === 'peer') {\n        // Peers can give feedback to other peers in the same team\n        const teamMembers = await storage.getUsersByManager(user.managerId!);\n        \n        for (const member of teamMembers) {\n          if (member.id !== userId) {\n            const review = await storage.getEmployeeReview(member.id, cycle.id);\n            if (review) {\n              // Check if feedback already given\n              const existingFeedback = await storage.getFeedback(review.id, userId);\n              \n              targets.push({\n                reviewId: review.id,\n                employeeName: `${member.firstName} ${member.lastName}`,\n                employeeRole: member.category || 'Employee',\n                department: member.department,\n                existingFeedback: existingFeedback,\n              });\n            }\n          }\n        }\n      }\n      \n      res.json(targets);\n    } catch (error) {\n      console.error(\"Error fetching feedback targets:\", error);\n      res.status(500).json({ message: \"Failed to fetch feedback targets\" });\n    }\n  });\n\n  // Meeting management\n  app.post('/api/meetings', isAuthenticated, async (req: any, res) => {\n    try {\n      const meetingData = insertMeetingSchema.parse({\n        ...req.body,\n        managerId: req.user.claims.sub,\n      });\n\n      const meeting = await storage.createMeeting(meetingData);\n\n      // Send meeting invitation\n      const employee = await storage.getUser(meeting.employeeId);\n      const manager = await storage.getUser(meeting.managerId);\n      \n      if (employee?.email && manager) {\n        await sendMeetingInvitation(\n          employee.email,\n          `${employee.firstName} ${employee.lastName}`,\n          `${manager.firstName} ${manager.lastName}`,\n          meeting.scheduledAt.toISOString(),\n          meeting.meetingLink || undefined\n        );\n      }\n\n      // Log activity\n      await storage.logActivity({\n        userId: req.user.claims.sub,\n        action: 'meeting_scheduled',\n        description: `Scheduled 1:1 meeting with ${employee?.firstName} ${employee?.lastName}`,\n        relatedEntityType: 'meeting',\n        relatedEntityId: meeting.id,\n      });\n\n      res.status(201).json(meeting);\n    } catch (error) {\n      console.error(\"Error creating meeting:\", error);\n      res.status(500).json({ message: \"Failed to create meeting\" });\n    }\n  });\n\n  app.get('/api/meetings/my-meetings', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      let meetings;\n      if (user.role === 'peer') {\n        meetings = await storage.getMeetingsByEmployee(userId);\n      } else {\n        meetings = await storage.getMeetingsByManager(userId);\n      }\n\n      res.json(meetings);\n    } catch (error) {\n      console.error(\"Error fetching meetings:\", error);\n      res.status(500).json({ message: \"Failed to fetch meetings\" });\n    }\n  });\n\n  // Appeal management\n  app.post('/api/appeals', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const cycle = await storage.getActiveReviewCycle();\n      \n      if (!cycle) {\n        return res.status(404).json({ message: \"No active review cycle\" });\n      }\n\n      const review = await storage.getEmployeeReview(userId, cycle.id);\n      \n      if (!review) {\n        return res.status(404).json({ message: \"Review not found\" });\n      }\n\n      if (review.appealUsed) {\n        return res.status(400).json({ message: \"Appeal already used for this review\" });\n      }\n\n      const appealData = insertAppealSchema.parse({\n        ...req.body,\n        reviewId: review.id,\n        employeeId: userId,\n      });\n\n      const appeal = await storage.createAppeal(appealData);\n\n      // Mark appeal as used\n      await storage.updateEmployeeReview(review.id, {\n        appealUsed: true,\n        status: 'appeal_requested',\n      });\n\n      // Send notification to manager\n      const employee = await storage.getUser(userId);\n      const manager = await storage.getUser(employee?.managerId || '');\n      \n      if (manager?.email && employee) {\n        await sendAppealNotification(\n          manager.email,\n          `${employee.firstName} ${employee.lastName}`,\n          `${manager.firstName} ${manager.lastName}`,\n          appeal.reason\n        );\n      }\n\n      // Log activity\n      await storage.logActivity({\n        userId,\n        action: 'appeal_submitted',\n        description: 'Submitted appeal request',\n        relatedEntityType: 'appeal',\n        relatedEntityId: appeal.id,\n      });\n\n      res.status(201).json(appeal);\n    } catch (error) {\n      console.error(\"Error creating appeal:\", error);\n      res.status(500).json({ message: \"Failed to create appeal\" });\n    }\n  });\n\n  app.put('/api/appeals/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n\n      if (user?.role !== 'l2_manager' && user?.role !== 'founder') {\n        return res.status(403).json({ message: \"Not authorized to handle appeals\" });\n      }\n\n      const appeal = await storage.updateAppeal(id, {\n        ...req.body,\n        managerId: userId,\n      });\n\n      // Log activity\n      await storage.logActivity({\n        userId,\n        action: 'appeal_processed',\n        description: `Processed appeal: ${appeal.status}`,\n        relatedEntityType: 'appeal',\n        relatedEntityId: appeal.id,\n      });\n\n      res.json(appeal);\n    } catch (error) {\n      console.error(\"Error updating appeal:\", error);\n      res.status(500).json({ message: \"Failed to update appeal\" });\n    }\n  });\n\n  // User management\n  app.get('/api/users/team', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      let team = [];\n\n      if (user.role === 'founder') {\n        team = await storage.getUsersByRole('l1_manager');\n      } else if (user.role === 'l1_manager') {\n        team = await storage.getUsersByRole('l2_manager');\n      } else if (user.role === 'l2_manager') {\n        team = await storage.getUsersByRole('l3_manager');\n        const peers = await storage.getUsersByRole('peer');\n        team = [...team, ...peers];\n      } else if (user.role === 'l3_manager') {\n        team = await storage.getDirectReports(userId);\n      }\n\n      res.json(team);\n    } catch (error) {\n      console.error(\"Error fetching team:\", error);\n      res.status(500).json({ message: \"Failed to fetch team\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":16561},"server/storage.ts":{"content":"import {\n  users,\n  reviewCycles,\n  employeeReviews,\n  feedback,\n  meetings,\n  appeals,\n  activityLogs,\n  type User,\n  type UpsertUser,\n  type InsertUser,\n  type ReviewCycle,\n  type InsertReviewCycle,\n  type EmployeeReview,\n  type InsertEmployeeReview,\n  type Feedback,\n  type InsertFeedback,\n  type Meeting,\n  type InsertMeeting,\n  type Appeal,\n  type InsertAppeal,\n  type ActivityLog,\n  type InsertActivityLog,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, or, desc, asc, count, avg } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations (required for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  \n  // User management\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, data: Partial<InsertUser>): Promise<User>;\n  getUsersByRole(role: string): Promise<User[]>;\n  getUsersByManager(managerId: string): Promise<User[]>;\n  getDirectReports(managerId: string): Promise<User[]>;\n  \n  // Review cycle management\n  createReviewCycle(cycle: InsertReviewCycle): Promise<ReviewCycle>;\n  getActiveReviewCycle(): Promise<ReviewCycle | undefined>;\n  getAllReviewCycles(): Promise<ReviewCycle[]>;\n  updateReviewCycle(id: string, data: Partial<InsertReviewCycle>): Promise<ReviewCycle>;\n  \n  // Employee review management\n  createEmployeeReview(review: InsertEmployeeReview): Promise<EmployeeReview>;\n  getEmployeeReview(employeeId: string, cycleId: string): Promise<EmployeeReview | undefined>;\n  getEmployeeReviewById(id: string): Promise<EmployeeReview | undefined>;\n  updateEmployeeReview(id: string, data: Partial<InsertEmployeeReview>): Promise<EmployeeReview>;\n  getReviewsByManager(managerId: string, cycleId: string): Promise<EmployeeReview[]>;\n  getReviewsByStatus(status: string, cycleId: string): Promise<EmployeeReview[]>;\n  getPendingApprovals(managerId: string): Promise<EmployeeReview[]>;\n  \n  // 360-degree feedback\n  createFeedback(feedbackData: InsertFeedback): Promise<Feedback>;\n  getFeedbackForReview(reviewId: string): Promise<Feedback[]>;\n  getFeedbackByUser(userId: string, cycleId: string): Promise<Feedback[]>;\n  \n  // Meeting management\n  createMeeting(meeting: InsertMeeting): Promise<Meeting>;\n  getMeetingsByEmployee(employeeId: string): Promise<Meeting[]>;\n  getMeetingsByManager(managerId: string): Promise<Meeting[]>;\n  updateMeeting(id: string, data: Partial<InsertMeeting>): Promise<Meeting>;\n  \n  // Appeal management\n  createAppeal(appeal: InsertAppeal): Promise<Appeal>;\n  getAppealsByEmployee(employeeId: string): Promise<Appeal[]>;\n  getAppealsByManager(managerId: string): Promise<Appeal[]>;\n  updateAppeal(id: string, data: Partial<InsertAppeal>): Promise<Appeal>;\n  \n  // Activity logging\n  logActivity(activity: InsertActivityLog): Promise<ActivityLog>;\n  getRecentActivities(limit?: number): Promise<ActivityLog[]>;\n  getActivitiesByUser(userId: string): Promise<ActivityLog[]>;\n  \n  // Analytics\n  getReviewStats(cycleId: string): Promise<any>;\n  getRatingDistribution(cycleId: string): Promise<any>;\n  getDepartmentPerformance(cycleId: string): Promise<any>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations (required for Replit Auth)\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // User management\n  async createUser(userData: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(userData).returning();\n    return user;\n  }\n\n  async updateUser(id: string, data: Partial<InsertUser>): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ ...data, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async getUsersByRole(role: string): Promise<User[]> {\n    return await db.select().from(users).where(eq(users.role, role as any));\n  }\n\n  async getUsersByManager(managerId: string): Promise<User[]> {\n    return await db.select().from(users).where(eq(users.managerId, managerId));\n  }\n\n  async getDirectReports(managerId: string): Promise<User[]> {\n    return await db.select().from(users).where(eq(users.managerId, managerId));\n  }\n\n  // Review cycle management\n  async createReviewCycle(cycleData: InsertReviewCycle): Promise<ReviewCycle> {\n    const [cycle] = await db.insert(reviewCycles).values(cycleData).returning();\n    return cycle;\n  }\n\n  async getActiveReviewCycle(): Promise<ReviewCycle | undefined> {\n    const [cycle] = await db\n      .select()\n      .from(reviewCycles)\n      .where(eq(reviewCycles.isActive, true));\n    return cycle;\n  }\n\n  async getAllReviewCycles(): Promise<ReviewCycle[]> {\n    return await db.select().from(reviewCycles).orderBy(desc(reviewCycles.createdAt));\n  }\n\n  async updateReviewCycle(id: string, data: Partial<InsertReviewCycle>): Promise<ReviewCycle> {\n    const [cycle] = await db\n      .update(reviewCycles)\n      .set(data)\n      .where(eq(reviewCycles.id, id))\n      .returning();\n    return cycle;\n  }\n\n  // Employee review management\n  async createEmployeeReview(reviewData: InsertEmployeeReview): Promise<EmployeeReview> {\n    const [review] = await db.insert(employeeReviews).values(reviewData).returning();\n    return review;\n  }\n\n  async getEmployeeReview(employeeId: string, cycleId: string): Promise<EmployeeReview | undefined> {\n    const [review] = await db\n      .select()\n      .from(employeeReviews)\n      .where(\n        and(\n          eq(employeeReviews.employeeId, employeeId),\n          eq(employeeReviews.cycleId, cycleId)\n        )\n      );\n    return review;\n  }\n\n  async getEmployeeReviewById(id: string): Promise<EmployeeReview | undefined> {\n    const [review] = await db\n      .select()\n      .from(employeeReviews)\n      .where(eq(employeeReviews.id, id));\n    return review;\n  }\n\n  async updateEmployeeReview(id: string, data: Partial<InsertEmployeeReview>): Promise<EmployeeReview> {\n    const [review] = await db\n      .update(employeeReviews)\n      .set({ ...data, updatedAt: new Date() })\n      .where(eq(employeeReviews.id, id))\n      .returning();\n    return review;\n  }\n\n  async getReviewsByManager(managerId: string, cycleId: string): Promise<EmployeeReview[]> {\n    return await db\n      .select()\n      .from(employeeReviews)\n      .innerJoin(users, eq(employeeReviews.employeeId, users.id))\n      .where(\n        and(\n          eq(users.managerId, managerId),\n          eq(employeeReviews.cycleId, cycleId)\n        )\n      );\n  }\n\n  async getReviewsByStatus(status: string, cycleId: string): Promise<EmployeeReview[]> {\n    return await db\n      .select()\n      .from(employeeReviews)\n      .where(\n        and(\n          eq(employeeReviews.status, status as any),\n          eq(employeeReviews.cycleId, cycleId)\n        )\n      );\n  }\n\n  async getPendingApprovals(managerId: string): Promise<EmployeeReview[]> {\n    return await db\n      .select()\n      .from(employeeReviews)\n      .innerJoin(users, eq(employeeReviews.employeeId, users.id))\n      .where(\n        and(\n          eq(users.managerId, managerId),\n          or(\n            eq(employeeReviews.status, \"manager_review\"),\n            eq(employeeReviews.status, \"meeting_scheduled\")\n          )\n        )\n      );\n  }\n\n  // 360-degree feedback\n  async createFeedback(feedbackData: InsertFeedback): Promise<Feedback> {\n    const [feedbackRecord] = await db.insert(feedback).values(feedbackData).returning();\n    return feedbackRecord;\n  }\n\n  async getFeedbackForReview(reviewId: string): Promise<Feedback[]> {\n    return await db\n      .select()\n      .from(feedback)\n      .where(eq(feedback.reviewId, reviewId));\n  }\n\n  async getFeedbackByUser(userId: string, cycleId: string): Promise<Feedback[]> {\n    return await db\n      .select()\n      .from(feedback)\n      .innerJoin(employeeReviews, eq(feedback.reviewId, employeeReviews.id))\n      .where(\n        and(\n          eq(feedback.feedbackFromId, userId),\n          eq(employeeReviews.cycleId, cycleId)\n        )\n      );\n  }\n\n  // Meeting management\n  async createMeeting(meetingData: InsertMeeting): Promise<Meeting> {\n    const [meeting] = await db.insert(meetings).values(meetingData).returning();\n    return meeting;\n  }\n\n  async getMeetingsByEmployee(employeeId: string): Promise<Meeting[]> {\n    return await db\n      .select()\n      .from(meetings)\n      .where(eq(meetings.employeeId, employeeId))\n      .orderBy(desc(meetings.scheduledAt));\n  }\n\n  async getMeetingsByManager(managerId: string): Promise<Meeting[]> {\n    return await db\n      .select()\n      .from(meetings)\n      .where(eq(meetings.managerId, managerId))\n      .orderBy(desc(meetings.scheduledAt));\n  }\n\n  async updateMeeting(id: string, data: Partial<InsertMeeting>): Promise<Meeting> {\n    const [meeting] = await db\n      .update(meetings)\n      .set(data)\n      .where(eq(meetings.id, id))\n      .returning();\n    return meeting;\n  }\n\n  // Appeal management\n  async createAppeal(appealData: InsertAppeal): Promise<Appeal> {\n    const [appeal] = await db.insert(appeals).values(appealData).returning();\n    return appeal;\n  }\n\n  async getAppealsByEmployee(employeeId: string): Promise<Appeal[]> {\n    return await db\n      .select()\n      .from(appeals)\n      .where(eq(appeals.employeeId, employeeId))\n      .orderBy(desc(appeals.createdAt));\n  }\n\n  async getAppealsByManager(managerId: string): Promise<Appeal[]> {\n    return await db\n      .select()\n      .from(appeals)\n      .where(eq(appeals.managerId, managerId))\n      .orderBy(desc(appeals.createdAt));\n  }\n\n  async updateAppeal(id: string, data: Partial<InsertAppeal>): Promise<Appeal> {\n    const [appeal] = await db\n      .update(appeals)\n      .set({ ...data, updatedAt: new Date() })\n      .where(eq(appeals.id, id))\n      .returning();\n    return appeal;\n  }\n\n  // Activity logging\n  async logActivity(activityData: InsertActivityLog): Promise<ActivityLog> {\n    const [activity] = await db.insert(activityLogs).values(activityData).returning();\n    return activity;\n  }\n\n  async getRecentActivities(limit: number = 10): Promise<ActivityLog[]> {\n    return await db\n      .select()\n      .from(activityLogs)\n      .orderBy(desc(activityLogs.createdAt))\n      .limit(limit);\n  }\n\n  async getActivitiesByUser(userId: string): Promise<ActivityLog[]> {\n    return await db\n      .select()\n      .from(activityLogs)\n      .where(eq(activityLogs.userId, userId))\n      .orderBy(desc(activityLogs.createdAt));\n  }\n\n  // Analytics\n  async getReviewStats(cycleId: string): Promise<any> {\n    const totalEmployees = await db\n      .select({ count: count() })\n      .from(employeeReviews)\n      .where(eq(employeeReviews.cycleId, cycleId));\n\n    const completedReviews = await db\n      .select({ count: count() })\n      .from(employeeReviews)\n      .where(\n        and(\n          eq(employeeReviews.cycleId, cycleId),\n          eq(employeeReviews.status, \"completed\")\n        )\n      );\n\n    const averageRating = await db\n      .select({ avg: avg(employeeReviews.finalRating) })\n      .from(employeeReviews)\n      .where(\n        and(\n          eq(employeeReviews.cycleId, cycleId),\n          eq(employeeReviews.status, \"completed\")\n        )\n      );\n\n    return {\n      totalEmployees: totalEmployees[0]?.count || 0,\n      completedReviews: completedReviews[0]?.count || 0,\n      averageRating: averageRating[0]?.avg || 0,\n    };\n  }\n\n  async getRatingDistribution(cycleId: string): Promise<any> {\n    return await db\n      .select({\n        rating: employeeReviews.finalRating,\n        count: count(),\n      })\n      .from(employeeReviews)\n      .where(\n        and(\n          eq(employeeReviews.cycleId, cycleId),\n          eq(employeeReviews.status, \"completed\")\n        )\n      )\n      .groupBy(employeeReviews.finalRating);\n  }\n\n  async getDepartmentPerformance(cycleId: string): Promise<any> {\n    return await db\n      .select({\n        department: users.department,\n        averageRating: avg(employeeReviews.finalRating),\n        employeeCount: count(),\n      })\n      .from(employeeReviews)\n      .innerJoin(users, eq(employeeReviews.employeeId, users.id))\n      .where(\n        and(\n          eq(employeeReviews.cycleId, cycleId),\n          eq(employeeReviews.status, \"completed\")\n        )\n      )\n      .groupBy(users.department);\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":12650},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql, relations } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  decimal,\n  boolean,\n  pgEnum,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table (required for Replit Auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// Enums\nexport const roleEnum = pgEnum(\"role\", [\"founder\", \"l1_manager\", \"l2_manager\", \"l3_manager\", \"peer\"]);\nexport const categoryEnum = pgEnum(\"category\", [\"software_developer\", \"ml_engineer\", \"qa_engineer\", \"ui_ux_developer\"]);\nexport const reviewStatusEnum = pgEnum(\"review_status\", [\"not_started\", \"self_assessment\", \"feedback_collection\", \"manager_review\", \"meeting_scheduled\", \"completed\", \"appeal_requested\", \"appeal_completed\"]);\nexport const ratingEnum = pgEnum(\"rating\", [\"1\", \"2\", \"3\", \"4\", \"5\"]);\nexport const appealStatusEnum = pgEnum(\"appeal_status\", [\"pending\", \"accepted\", \"rejected\", \"completed\"]);\n\n// User storage table (required for Replit Auth)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  role: roleEnum(\"role\").notNull().default(\"peer\"),\n  category: categoryEnum(\"category\"),\n  managerId: varchar(\"manager_id\").references(() => users.id),\n  department: varchar(\"department\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Review cycles\nexport const reviewCycles = pgTable(\"review_cycles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  startDate: timestamp(\"start_date\").notNull(),\n  endDate: timestamp(\"end_date\").notNull(),\n  selfAssessmentDeadline: timestamp(\"self_assessment_deadline\").notNull(),\n  feedbackDeadline: timestamp(\"feedback_deadline\").notNull(),\n  reviewDeadline: timestamp(\"review_deadline\").notNull(),\n  meetingDeadline: timestamp(\"meeting_deadline\").notNull(),\n  isActive: boolean(\"is_active\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Employee reviews\nexport const employeeReviews = pgTable(\"employee_reviews\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  employeeId: varchar(\"employee_id\").notNull().references(() => users.id),\n  cycleId: varchar(\"cycle_id\").notNull().references(() => reviewCycles.id),\n  status: reviewStatusEnum(\"status\").default(\"not_started\"),\n  selfAssessmentData: jsonb(\"self_assessment_data\"),\n  currentCtc: decimal(\"current_ctc\"),\n  expectedCtc: decimal(\"expected_ctc\"),\n  expectedIncrementPercentage: decimal(\"expected_increment_percentage\"),\n  finalRating: ratingEnum(\"final_rating\"),\n  finalIncrementPercentage: decimal(\"final_increment_percentage\"),\n  l3Comments: text(\"l3_comments\"),\n  l2Comments: text(\"l2_comments\"),\n  l1Comments: text(\"l1_comments\"),\n  founderComments: text(\"founder_comments\"),\n  meetingNotes: text(\"meeting_notes\"),\n  appealUsed: boolean(\"appeal_used\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// 360-degree feedback\nexport const feedback = pgTable(\"feedback\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  reviewId: varchar(\"review_id\").notNull().references(() => employeeReviews.id),\n  feedbackFromId: varchar(\"feedback_from_id\").notNull().references(() => users.id),\n  technicalCompetence: ratingEnum(\"technical_competence\"),\n  communicationSkills: ratingEnum(\"communication_skills\"),\n  teamCollaboration: ratingEnum(\"team_collaboration\"),\n  problemSolving: ratingEnum(\"problem_solving\"),\n  leadershipPotential: ratingEnum(\"leadership_potential\"),\n  reliability: ratingEnum(\"reliability\"),\n  innovation: ratingEnum(\"innovation\"),\n  overallFeedback: text(\"overall_feedback\"),\n  strengths: text(\"strengths\"),\n  improvements: text(\"improvements\"),\n  isAnonymous: boolean(\"is_anonymous\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Meeting schedules\nexport const meetings = pgTable(\"meetings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  reviewId: varchar(\"review_id\").notNull().references(() => employeeReviews.id),\n  managerId: varchar(\"manager_id\").notNull().references(() => users.id),\n  employeeId: varchar(\"employee_id\").notNull().references(() => users.id),\n  scheduledAt: timestamp(\"scheduled_at\").notNull(),\n  duration: integer(\"duration\").default(45), // minutes\n  meetingLink: varchar(\"meeting_link\"),\n  status: varchar(\"status\").default(\"scheduled\"), // scheduled, completed, cancelled\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Appeals\nexport const appeals = pgTable(\"appeals\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  reviewId: varchar(\"review_id\").notNull().references(() => employeeReviews.id),\n  employeeId: varchar(\"employee_id\").notNull().references(() => users.id),\n  reason: text(\"reason\").notNull(),\n  supportingDocuments: jsonb(\"supporting_documents\"),\n  desiredOutcome: text(\"desired_outcome\"),\n  status: appealStatusEnum(\"status\").default(\"pending\"),\n  managerId: varchar(\"manager_id\").references(() => users.id),\n  managerResponse: text(\"manager_response\"),\n  finalRating: ratingEnum(\"final_rating\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Activity logs\nexport const activityLogs = pgTable(\"activity_logs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  action: varchar(\"action\").notNull(),\n  description: text(\"description\"),\n  relatedEntityType: varchar(\"related_entity_type\"), // review, appeal, meeting, etc.\n  relatedEntityId: varchar(\"related_entity_id\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ one, many }) => ({\n  manager: one(users, {\n    fields: [users.managerId],\n    references: [users.id],\n  }),\n  directReports: many(users),\n  employeeReviews: many(employeeReviews),\n  givenFeedback: many(feedback, { relationName: \"givenFeedback\" }),\n  meetings: many(meetings),\n  appeals: many(appeals),\n  activityLogs: many(activityLogs),\n}));\n\nexport const reviewCyclesRelations = relations(reviewCycles, ({ many }) => ({\n  employeeReviews: many(employeeReviews),\n}));\n\nexport const employeeReviewsRelations = relations(employeeReviews, ({ one, many }) => ({\n  employee: one(users, {\n    fields: [employeeReviews.employeeId],\n    references: [users.id],\n  }),\n  cycle: one(reviewCycles, {\n    fields: [employeeReviews.cycleId],\n    references: [reviewCycles.id],\n  }),\n  feedback: many(feedback),\n  meetings: many(meetings),\n  appeals: many(appeals),\n}));\n\nexport const feedbackRelations = relations(feedback, ({ one }) => ({\n  review: one(employeeReviews, {\n    fields: [feedback.reviewId],\n    references: [employeeReviews.id],\n  }),\n  feedbackFrom: one(users, {\n    fields: [feedback.feedbackFromId],\n    references: [users.id],\n  }),\n}));\n\nexport const meetingsRelations = relations(meetings, ({ one }) => ({\n  review: one(employeeReviews, {\n    fields: [meetings.reviewId],\n    references: [employeeReviews.id],\n  }),\n  manager: one(users, {\n    fields: [meetings.managerId],\n    references: [users.id],\n  }),\n  employee: one(users, {\n    fields: [meetings.employeeId],\n    references: [users.id],\n  }),\n}));\n\nexport const appealsRelations = relations(appeals, ({ one }) => ({\n  review: one(employeeReviews, {\n    fields: [appeals.reviewId],\n    references: [employeeReviews.id],\n  }),\n  employee: one(users, {\n    fields: [appeals.employeeId],\n    references: [users.id],\n  }),\n  manager: one(users, {\n    fields: [appeals.managerId],\n    references: [users.id],\n  }),\n}));\n\nexport const activityLogsRelations = relations(activityLogs, ({ one }) => ({\n  user: one(users, {\n    fields: [activityLogs.userId],\n    references: [users.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertReviewCycleSchema = createInsertSchema(reviewCycles).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertEmployeeReviewSchema = createInsertSchema(employeeReviews).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertFeedbackSchema = createInsertSchema(feedback).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertMeetingSchema = createInsertSchema(meetings).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAppealSchema = createInsertSchema(appeals).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertActivityLogSchema = createInsertSchema(activityLogs).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Upsert schema for Replit Auth\nexport const upsertUserSchema = insertUserSchema.partial().extend({\n  id: z.string(),\n});\n\n// Types\nexport type UpsertUser = z.infer<typeof upsertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type ReviewCycle = typeof reviewCycles.$inferSelect;\nexport type InsertReviewCycle = z.infer<typeof insertReviewCycleSchema>;\nexport type EmployeeReview = typeof employeeReviews.$inferSelect;\nexport type InsertEmployeeReview = z.infer<typeof insertEmployeeReviewSchema>;\nexport type Feedback = typeof feedback.$inferSelect;\nexport type InsertFeedback = z.infer<typeof insertFeedbackSchema>;\nexport type Meeting = typeof meetings.$inferSelect;\nexport type InsertMeeting = z.infer<typeof insertMeetingSchema>;\nexport type Appeal = typeof appeals.$inferSelect;\nexport type InsertAppeal = z.infer<typeof insertAppealSchema>;\nexport type ActivityLog = typeof activityLogs.$inferSelect;\nexport type InsertActivityLog = z.infer<typeof insertActivityLogSchema>;\n","size_bytes":10257},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/landing\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Employees from \"@/pages/employees\";\nimport Reviews from \"@/pages/reviews\";\nimport Approvals from \"@/pages/approvals\";\nimport Analytics from \"@/pages/analytics\";\nimport Settings from \"@/pages/settings\";\nimport SelfAssessment from \"@/pages/self-assessment\";\nimport Feedback from \"@/pages/feedback\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <Switch>\n      {isLoading || !isAuthenticated ? (\n        <Route path=\"/\" component={Landing} />\n      ) : (\n        <>\n          <Route path=\"/\" component={Dashboard} />\n          <Route path=\"/employees\" component={Employees} />\n          <Route path=\"/reviews\" component={Reviews} />\n          <Route path=\"/self-assessment\" component={SelfAssessment} />\n          <Route path=\"/feedback\" component={Feedback} />\n          <Route path=\"/approvals\" component={Approvals} />\n          <Route path=\"/analytics\" component={Analytics} />\n          <Route path=\"/settings\" component={Settings} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1712},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(203.8863 88.2845% 53.1373%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}","size_bytes":5055},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":257},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/constants.ts":{"content":"export const EMPLOYEE_CATEGORIES = {\n  software_developer: 'Software Developer',\n  ml_engineer: 'ML Engineer', \n  qa_engineer: 'QA Engineer',\n  ui_ux_developer: 'UI/UX Developer',\n} as const;\n\nexport const USER_ROLES = {\n  founder: 'Founder',\n  l1_manager: 'L1 Manager',\n  l2_manager: 'L2 Manager', \n  l3_manager: 'L3 Manager',\n  peer: 'Peer',\n} as const;\n\nexport const REVIEW_STATUS = {\n  not_started: 'Not Started',\n  self_assessment: 'Self Assessment',\n  feedback_collection: 'Feedback Collection',\n  manager_review: 'Manager Review',\n  meeting_scheduled: 'Meeting Scheduled',\n  completed: 'Completed',\n  appeal_requested: 'Appeal Requested',\n  appeal_completed: 'Appeal Completed',\n} as const;\n\nexport const RATING_SCALE = {\n  1: 'Unsatisfactory (Bottom 10%)',\n  2: 'Needs Improvement (Next 20%)',\n  3: 'Meets Expectations (Middle 40%)',\n  4: 'Exceeds Expectations (Next 20%)',\n  5: 'Outstanding (Top 10%)',\n} as const;\n\nexport const APPEAL_STATUS = {\n  pending: 'Pending',\n  accepted: 'Accepted',\n  rejected: 'Rejected', \n  completed: 'Completed',\n} as const;\n\nexport const SELF_ASSESSMENT_FIELDS = {\n  software_developer: [\n    'Technical skills assessment (languages, frameworks, tools)',\n    'Code quality metrics',\n    'Bug resolution rate',\n    'Feature delivery count',\n    'Technical documentation contributed',\n    'Code review participation',\n    'Innovation/optimization initiatives',\n    'Learning certifications completed',\n  ],\n  ml_engineer: [\n    'Model performance improvements',\n    'Research papers/patents',\n    'Algorithm optimization metrics',\n    'Data pipeline contributions',\n    'Experimentation velocity',\n    'Production model deployments',\n    'Knowledge sharing sessions conducted',\n  ],\n  qa_engineer: [\n    'Test coverage achievements',\n    'Bug detection efficiency',\n    'Automation scripts created',\n    'Test case documentation',\n    'Critical bug discoveries',\n    'Process improvement suggestions',\n    'Cross-team collaboration',\n  ],\n  ui_ux_developer: [\n    'Design portfolio submissions',\n    'User satisfaction scores',\n    'Accessibility improvements',\n    'Design system contributions',\n    'Prototypes delivered',\n    'A/B test results',\n    'Design review participation',\n  ],\n} as const;\n\nexport const COMMON_ASSESSMENT_FIELDS = [\n  'Educational qualifications added this year',\n  'Professional achievements',\n  'Expected increment percentage',\n  'Career goals',\n  'Training needs identified',\n  'Work-from-home preference',\n  'Project contributions',\n  'Client feedback received',\n  'Team collaboration rating',\n  'Initiative and ownership examples',\n  'Challenges faced and solutions',\n  'Areas of improvement (self-identified)',\n] as const;\n\nexport const FEEDBACK_CRITERIA = [\n  { key: 'technicalCompetence', label: 'Technical Competence' },\n  { key: 'communicationSkills', label: 'Communication Skills' },\n  { key: 'teamCollaboration', label: 'Team Collaboration' },\n  { key: 'problemSolving', label: 'Problem Solving Ability' },\n  { key: 'leadershipPotential', label: 'Leadership Potential' },\n  { key: 'reliability', label: 'Reliability and Commitment' },\n  { key: 'innovation', label: 'Innovation and Creativity' },\n] as const;\n\nexport const RATING_WEIGHTS = {\n  self_assessment: 0.4,\n  feedback_360: 0.3,\n  l3_input: 0.2,\n  kra_achievement: 0.1,\n} as const;\n\nexport const MEETING_DURATION_OPTIONS = [\n  { value: 30, label: '30 minutes' },\n  { value: 45, label: '45 minutes' },\n  { value: 60, label: '1 hour' },\n  { value: 90, label: '1.5 hours' },\n] as const;\n\nexport const NOTIFICATION_TYPES = {\n  SUCCESS: 'success',\n  ERROR: 'error', \n  WARNING: 'warning',\n  INFO: 'info',\n} as const;\n","size_bytes":3648},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/types.ts":{"content":"import { z } from 'zod';\n\n// Form validation schemas\nexport const selfAssessmentSchema = z.object({\n  currentCtc: z.string().min(1, 'Current CTC is required'),\n  expectedCtc: z.string().min(1, 'Expected CTC is required'),\n  expectedIncrementPercentage: z.string().min(1, 'Expected increment percentage is required'),\n  careerGoals: z.string().min(10, 'Career goals must be at least 10 characters'),\n  trainingNeeds: z.string().optional(),\n  workFromHomePreference: z.enum(['yes', 'no', 'hybrid']),\n  projectContributions: z.string().min(10, 'Project contributions must be at least 10 characters'),\n  teamCollaboration: z.enum(['1', '2', '3', '4', '5']),\n  initiatives: z.string().min(10, 'Initiative examples must be at least 10 characters'),\n  challenges: z.string().min(10, 'Challenges and solutions must be at least 10 characters'),\n  areasOfImprovement: z.string().min(10, 'Areas of improvement must be at least 10 characters'),\n  categorySpecificFields: z.record(z.string()).optional(),\n  additionalComments: z.string().optional(),\n});\n\nexport const feedbackSchema = z.object({\n  reviewId: z.string().min(1, 'Review ID is required'),\n  technicalCompetence: z.enum(['1', '2', '3', '4', '5']),\n  communicationSkills: z.enum(['1', '2', '3', '4', '5']),\n  teamCollaboration: z.enum(['1', '2', '3', '4', '5']),\n  problemSolving: z.enum(['1', '2', '3', '4', '5']),\n  leadershipPotential: z.enum(['1', '2', '3', '4', '5']),\n  reliability: z.enum(['1', '2', '3', '4', '5']),\n  innovation: z.enum(['1', '2', '3', '4', '5']),\n  overallFeedback: z.string().min(50, 'Overall feedback must be at least 50 characters'),\n  strengths: z.string().min(10, 'Strengths must be at least 10 characters'),\n  improvements: z.string().optional(),\n  isAnonymous: z.boolean().default(true),\n});\n\nexport const reviewSchema = z.object({\n  employeeId: z.string().min(1, 'Employee ID is required'),\n  l3Comments: z.string().optional(),\n  l2Comments: z.string().optional(),\n  l1Comments: z.string().optional(),\n  founderComments: z.string().optional(),\n  finalRating: z.enum(['1', '2', '3', '4', '5']).optional(),\n  finalIncrementPercentage: z.string().optional(),\n});\n\nexport const appealSchema = z.object({\n  reason: z.string().min(50, 'Reason must be at least 50 characters'),\n  desiredOutcome: z.string().min(20, 'Desired outcome must be at least 20 characters'),\n  supportingDocuments: z.array(z.string()).optional(),\n});\n\nexport const meetingSchema = z.object({\n  reviewId: z.string().min(1, 'Review ID is required'),\n  employeeId: z.string().min(1, 'Employee ID is required'),\n  scheduledAt: z.date(),\n  duration: z.number().min(15).max(180),\n  meetingLink: z.string().url().optional(),\n  notes: z.string().optional(),\n});\n\n// Type exports\nexport type SelfAssessmentData = z.infer<typeof selfAssessmentSchema>;\nexport type FeedbackData = z.infer<typeof feedbackSchema>;\nexport type ReviewData = z.infer<typeof reviewSchema>;\nexport type AppealData = z.infer<typeof appealSchema>;\nexport type MeetingData = z.infer<typeof meetingSchema>;\n\n// UI component types\nexport interface DashboardStats {\n  totalEmployees: number;\n  completedReviews: number;\n  pendingApprovals: number;\n  averageRating: number;\n}\n\nexport interface PendingAction {\n  type: 'approval' | 'appeal' | 'feedback' | 'meeting';\n  priority: 'urgent' | 'high' | 'medium' | 'low';\n  employee: {\n    id: string;\n    firstName: string;\n    lastName: string;\n    category: string;\n  };\n  data: any;\n  deadline?: string;\n}\n\nexport interface TimelineItem {\n  title: string;\n  period: string;\n  status: 'completed' | 'in-progress' | 'upcoming' | 'pending';\n  progress?: string;\n}\n\nexport interface RatingDistribution {\n  rating: string;\n  count: number;\n  percentage: number;\n}\n\nexport interface DepartmentPerformance {\n  department: string;\n  averageRating: number;\n  employeeCount: number;\n}\n\nexport interface ActivityLog {\n  id: string;\n  userId: string;\n  action: string;\n  description: string;\n  relatedEntityType?: string;\n  relatedEntityId?: string;\n  createdAt: string;\n}\n\n// Form field configurations\nexport interface FormField {\n  name: string;\n  label: string;\n  type: 'text' | 'textarea' | 'select' | 'number' | 'radio' | 'checkbox';\n  required: boolean;\n  options?: Array<{ value: string; label: string }>;\n  placeholder?: string;\n  validation?: any;\n}\n\nexport interface CategoryFormConfig {\n  title: string;\n  description: string;\n  fields: FormField[];\n}\n\n// API response types\nexport interface ApiResponse<T = any> {\n  success: boolean;\n  data?: T;\n  message?: string;\n  errors?: Record<string, string[]>;\n}\n\nexport interface PaginatedResponse<T> {\n  data: T[];\n  total: number;\n  page: number;\n  pageSize: number;\n  totalPages: number;\n}\n\n// Notification types\nexport interface Notification {\n  id: string;\n  type: 'success' | 'error' | 'warning' | 'info';\n  title: string;\n  message: string;\n  timestamp: Date;\n  read: boolean;\n}\n\n// Filter and search types\nexport interface SearchFilters {\n  query?: string;\n  department?: string;\n  role?: string;\n  status?: string;\n  dateRange?: {\n    start: Date;\n    end: Date;\n  };\n}\n\nexport interface SortConfig {\n  field: string;\n  direction: 'asc' | 'desc';\n}\n\n// Chart data types\nexport interface ChartDataPoint {\n  label: string;\n  value: number;\n  color?: string;\n}\n\nexport interface TimeSeriesPoint {\n  date: string;\n  value: number;\n}\n\n// Meeting types\nexport interface MeetingSlot {\n  date: Date;\n  time: string;\n  available: boolean;\n  duration: number;\n}\n\nexport interface CalendarEvent {\n  id: string;\n  title: string;\n  start: Date;\n  end: Date;\n  type: 'meeting' | 'deadline' | 'reminder';\n  attendees?: string[];\n}\n","size_bytes":5623},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/analytics.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport TopHeader from \"@/components/layout/top-header\";\n\nexport default function Analytics() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  if (isLoading || !isAuthenticated) {\n    return <div className=\"min-h-screen bg-background\"></div>;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Sidebar />\n      <main className=\"ml-64 min-h-screen bg-background\">\n        <TopHeader title=\"Analytics\" />\n        <div className=\"p-6\">\n          <div className=\"text-center py-20\">\n            <h2 className=\"text-2xl font-semibold text-foreground mb-2\">Analytics Dashboard</h2>\n            <p className=\"text-muted-foreground\">Advanced analytics features coming soon...</p>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":1333},"client/src/pages/approvals.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport TopHeader from \"@/components/layout/top-header\";\n\nexport default function Approvals() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  if (isLoading || !isAuthenticated) {\n    return <div className=\"min-h-screen bg-background\"></div>;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Sidebar />\n      <main className=\"ml-64 min-h-screen bg-background\">\n        <TopHeader title=\"Approvals\" />\n        <div className=\"p-6\">\n          <div className=\"text-center py-20\">\n            <h2 className=\"text-2xl font-semibold text-foreground mb-2\">Approval Management</h2>\n            <p className=\"text-muted-foreground\">Approval management features coming soon...</p>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":1334},"client/src/pages/dashboard.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport TopHeader from \"@/components/layout/top-header\";\nimport StatsOverview from \"@/components/dashboard/stats-overview\";\nimport PendingActions from \"@/components/dashboard/pending-actions\";\nimport ProcessTimeline from \"@/components/dashboard/process-timeline\";\nimport RatingDistribution from \"@/components/dashboard/rating-distribution\";\nimport DepartmentPerformance from \"@/components/dashboard/department-performance\";\nimport RecentActivity from \"@/components/dashboard/recent-activity\";\n\nexport default function Dashboard() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  if (isLoading || !isAuthenticated) {\n    return <div className=\"min-h-screen bg-background\"></div>;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Sidebar />\n      <main className=\"ml-64 min-h-screen bg-background\">\n        <TopHeader title=\"Dashboard\" />\n        <div className=\"p-6 space-y-6\">\n          <StatsOverview />\n          \n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            <div className=\"lg:col-span-2\">\n              <PendingActions />\n            </div>\n            <div>\n              <ProcessTimeline />\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <RatingDistribution />\n            <DepartmentPerformance />\n          </div>\n\n          <RecentActivity />\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":1999},"client/src/pages/employees.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport TopHeader from \"@/components/layout/top-header\";\n\nexport default function Employees() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  if (isLoading || !isAuthenticated) {\n    return <div className=\"min-h-screen bg-background\"></div>;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Sidebar />\n      <main className=\"ml-64 min-h-screen bg-background\">\n        <TopHeader title=\"Employees\" />\n        <div className=\"p-6\">\n          <div className=\"text-center py-20\">\n            <h2 className=\"text-2xl font-semibold text-foreground mb-2\">Employee Management</h2>\n            <p className=\"text-muted-foreground\">Employee management features coming soon...</p>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":1334},"client/src/pages/landing.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-background\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex justify-center mb-4\">\n            <div className=\"flex h-16 w-16 items-center justify-center rounded-lg bg-primary text-primary-foreground\">\n              <svg className=\"h-8 w-8\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\n              </svg>\n            </div>\n          </div>\n          <CardTitle className=\"text-2xl font-bold text-foreground\">\n            Increment Process Automation System\n          </CardTitle>\n          <p className=\"text-muted-foreground mt-2\">\n            Performance Management & Review System\n          </p>\n        </CardHeader>\n        <CardContent className=\"pt-6\">\n          <div className=\"space-y-4\">\n            <div className=\"text-center\">\n              <p className=\"text-sm text-muted-foreground mb-4\">\n                Please sign in to access your dashboard\n              </p>\n              <Button \n                className=\"w-full\" \n                onClick={() => window.location.href = '/api/login'}\n                data-testid=\"button-login\"\n              >\n                Sign In\n              </Button>\n            </div>\n            \n            <div className=\"mt-6 pt-6 border-t border-border\">\n              <div className=\"grid grid-cols-2 gap-4 text-center text-sm text-muted-foreground\">\n                <div>\n                  <div className=\"font-semibold text-foreground\">📊</div>\n                  <div>Analytics</div>\n                </div>\n                <div>\n                  <div className=\"font-semibold text-foreground\">🔄</div>\n                  <div>360° Feedback</div>\n                </div>\n                <div>\n                  <div className=\"font-semibold text-foreground\">📝</div>\n                  <div>Self Assessment</div>\n                </div>\n                <div>\n                  <div className=\"font-semibold text-foreground\">👥</div>\n                  <div>Team Reviews</div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":2554},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/reviews.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport TopHeader from \"@/components/layout/top-header\";\n\nexport default function Reviews() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  if (isLoading || !isAuthenticated) {\n    return <div className=\"min-h-screen bg-background\"></div>;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Sidebar />\n      <main className=\"ml-64 min-h-screen bg-background\">\n        <TopHeader title=\"Reviews\" />\n        <div className=\"p-6\">\n          <div className=\"text-center py-20\">\n            <h2 className=\"text-2xl font-semibold text-foreground mb-2\">Review Management</h2>\n            <p className=\"text-muted-foreground\">Review management features coming soon...</p>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":1326},"client/src/pages/settings.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport TopHeader from \"@/components/layout/top-header\";\n\nexport default function Settings() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  if (isLoading || !isAuthenticated) {\n    return <div className=\"min-h-screen bg-background\"></div>;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Sidebar />\n      <main className=\"ml-64 min-h-screen bg-background\">\n        <TopHeader title=\"Settings\" />\n        <div className=\"p-6\">\n          <div className=\"text-center py-20\">\n            <h2 className=\"text-2xl font-semibold text-foreground mb-2\">System Settings</h2>\n            <p className=\"text-muted-foreground\">Settings and configuration options coming soon...</p>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":1334},"client/src/components/dashboard/department-performance.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n\nexport default function DepartmentPerformance() {\n  const { data: performance, isLoading } = useQuery({\n    queryKey: ['/api/dashboard/analytics/department-performance'],\n  });\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Department Performance</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {[...Array(4)].map((_, i) => (\n              <div key={i} className=\"animate-pulse\">\n                <div className=\"h-16 bg-muted/50 rounded\"></div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const departmentIcons = {\n    Engineering: (\n      <svg className=\"h-4 w-4 text-blue-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4\"></path>\n      </svg>\n    ),\n    Design: (\n      <svg className=\"h-4 w-4 text-purple-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zm0 0h12a2 2 0 002-2v-4a2 2 0 00-2-2h-2.343M11 7.343l1.657-1.657a2 2 0 012.828 0l2.829 2.829a2 2 0 010 2.828l-8.486 8.485M7 17v4a2 2 0 002 2h4M11 7h3v3M15 11l4-4\"></path>\n      </svg>\n    ),\n    QA: (\n      <svg className=\"h-4 w-4 text-green-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\n      </svg>\n    ),\n    'Data Science': (\n      <svg className=\"h-4 w-4 text-orange-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z\"></path>\n      </svg>\n    ),\n  };\n\n  const departmentColors = {\n    Engineering: 'bg-blue-100',\n    Design: 'bg-purple-100', \n    QA: 'bg-green-100',\n    'Data Science': 'bg-orange-100',\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Department Performance</CardTitle>\n        <p className=\"text-sm text-muted-foreground\">Average ratings by department</p>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {!performance || performance.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <div className=\"text-muted-foreground\">\n                <svg className=\"h-12 w-12 mx-auto mb-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\"></path>\n                </svg>\n                <p className=\"text-sm\">No department data available</p>\n              </div>\n            </div>\n          ) : (\n            performance.map((dept: any, index: number) => {\n              const averageRating = parseFloat(dept.averageRating || 0).toFixed(1);\n              const progressWidth = (parseFloat(averageRating) / 5) * 100;\n              const departmentName = dept.department || 'Unknown';\n              \n              return (\n                <div key={index} className=\"flex items-center justify-between\" data-testid={`department-${departmentName.toLowerCase().replace(/\\s+/g, '-')}`}>\n                  <div className=\"flex items-center gap-3\">\n                    <div className={`h-8 w-8 ${departmentColors[departmentName as keyof typeof departmentColors] || 'bg-gray-100'} rounded-lg flex items-center justify-center`}>\n                      {departmentIcons[departmentName as keyof typeof departmentIcons] || (\n                        <svg className=\"h-4 w-4 text-gray-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4\"></path>\n                        </svg>\n                      )}\n                    </div>\n                    <div>\n                      <p className=\"font-medium text-foreground\">{departmentName}</p>\n                      <p className=\"text-sm text-muted-foreground\">{dept.employeeCount} employees</p>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"font-semibold text-foreground\">{averageRating}</p>\n                    <div className=\"flex items-center gap-1 mt-1\">\n                      <div className=\"w-16 h-2 bg-muted rounded-full\">\n                        <div \n                          className=\"h-full bg-green-500 rounded-full transition-all duration-300\"\n                          style={{ width: `${progressWidth}%` }}\n                        ></div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              );\n            })\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5581},"client/src/components/dashboard/pending-actions.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function PendingActions() {\n  const { data: pendingActions, isLoading } = useQuery({\n    queryKey: ['/api/dashboard/pending-actions'],\n  });\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Pending Actions</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"animate-pulse\">\n                <div className=\"h-16 bg-muted/50 rounded-lg\"></div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle>Pending Actions</CardTitle>\n          <span className=\"text-sm text-muted-foreground\">\n            {pendingActions?.length || 0} urgent items\n          </span>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {!pendingActions || pendingActions.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <div className=\"text-muted-foreground\">\n                <svg className=\"h-12 w-12 mx-auto mb-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\n                </svg>\n                <p className=\"text-sm\">No pending actions</p>\n                <p className=\"text-xs mt-1\">All caught up!</p>\n              </div>\n            </div>\n          ) : (\n            pendingActions.map((action: any, index: number) => (\n              <div \n                key={index} \n                className={`flex items-center justify-between p-4 bg-muted/50 rounded-lg border-l-4 ${\n                  action.type === 'appeal' ? 'border-l-destructive' : 'border-l-orange-500'\n                }`}\n              >\n                <div className=\"flex items-center gap-4\">\n                  <div className={`h-10 w-10 rounded-full flex items-center justify-center ${\n                    action.type === 'appeal' ? 'bg-red-100' : 'bg-orange-100'\n                  }`}>\n                    <span className={`text-sm font-medium ${\n                      action.type === 'appeal' ? 'text-red-600' : 'text-orange-600'\n                    }`}>\n                      {action.data.employee?.firstName?.[0] || 'U'}\n                      {action.data.employee?.lastName?.[0] || 'S'}\n                    </span>\n                  </div>\n                  <div>\n                    <p className=\"font-medium text-foreground\">\n                      {action.data.employee?.firstName} {action.data.employee?.lastName} - \n                      {action.type === 'appeal' ? ' Appeal Request' : ' Review Pending'}\n                    </p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {action.data.employee?.category?.replace('_', ' ').split(' ').map((word: string) => \n                        word.charAt(0).toUpperCase() + word.slice(1)\n                      ).join(' ')} • \n                      {action.type === 'appeal' ? 'Requires response' : 'Awaiting approval'}\n                    </p>\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-3\">\n                  <span className={`px-2 py-1 text-xs rounded-full ${\n                    action.type === 'appeal' \n                      ? 'bg-destructive/10 text-destructive' \n                      : 'bg-orange-100 text-orange-600'\n                  }`}>\n                    {action.type === 'appeal' ? 'Urgent' : 'Pending'}\n                  </span>\n                  <Button \n                    size=\"sm\" \n                    variant=\"default\"\n                    data-testid={`button-action-${action.type}-${index}`}\n                  >\n                    {action.type === 'appeal' ? 'Review' : 'View'}\n                  </Button>\n                </div>\n              </div>\n            ))\n          )}\n          \n          {pendingActions && pendingActions.length > 0 && (\n            <div className=\"pt-4 border-t border-border\">\n              <Button \n                variant=\"ghost\" \n                className=\"w-full text-sm text-primary hover:text-primary/80\"\n                data-testid=\"button-view-all-actions\"\n              >\n                View All Pending Actions\n              </Button>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4748},"client/src/components/dashboard/process-timeline.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useLocation } from \"wouter\";\nimport { ExternalLink } from \"lucide-react\";\n\nexport default function ProcessTimeline() {\n  const [location, setLocation] = useLocation();\n  const timelineItems = [\n    {\n      title: \"Self Assessment\",\n      period: \"Jan 15 - Feb 15\",\n      status: \"completed\",\n      link: \"/self-assessment\",\n    },\n    {\n      title: \"360° Feedback\",\n      period: \"Feb 16 - Mar 15\",\n      status: \"completed\",\n      link: \"/feedback\",\n    },\n    {\n      title: \"Manager Reviews\",\n      period: \"Mar 16 - Apr 15\",\n      status: \"in-progress\",\n      progress: \"76%\",\n    },\n    {\n      title: \"1:1 Meetings\",\n      period: \"Apr 16 - May 15\",\n      status: \"upcoming\",\n    },\n    {\n      title: \"Final Approvals\",\n      period: \"May 16 - Jun 15\",\n      status: \"pending\",\n    },\n  ];\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Review Timeline</CardTitle>\n        <p className=\"text-sm text-muted-foreground\">2024 Annual Cycle</p>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-6\">\n          {timelineItems.map((item, index) => (\n            <div key={index} className=\"flex items-start gap-3\">\n              <div className={`h-6 w-6 rounded-full flex items-center justify-center mt-1 ${\n                item.status === 'completed' \n                  ? 'bg-green-500' \n                  : item.status === 'in-progress'\n                  ? 'bg-primary'\n                  : 'bg-muted border-2 border-border'\n              }`}>\n                {item.status === 'completed' ? (\n                  <svg className=\"h-3 w-3 text-white\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\n                  </svg>\n                ) : item.status === 'in-progress' ? (\n                  <div className=\"h-2 w-2 bg-white rounded-full\"></div>\n                ) : (\n                  <div className=\"h-2 w-2 bg-muted-foreground rounded-full\"></div>\n                )}\n              </div>\n              <div className=\"flex-1\">\n                <div \n                  className={`p-3 rounded-lg transition-colors ${\n                    (item as any).link ? 'cursor-pointer hover:bg-muted' : ''\n                  }`}\n                  data-testid={`timeline-item-${item.title.toLowerCase().replace(/[^a-z0-9]/g, '-')}`}\n                  onClick={() => {\n                    if ((item as any).link) {\n                      setLocation((item as any).link);\n                    }\n                  }}\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <p className={`font-medium ${\n                      item.status === 'pending' || item.status === 'upcoming' \n                        ? 'text-muted-foreground' \n                        : 'text-foreground'\n                    }`}>\n                      {item.title}\n                    </p>\n                    {(item as any).link && (\n                      <ExternalLink className=\"h-4 w-4 text-muted-foreground\" />\n                    )}\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">{item.period}</p>\n                  <p className={`text-xs mt-1 ${\n                    item.status === 'completed' \n                      ? 'text-green-600' \n                      : item.status === 'in-progress'\n                      ? 'text-primary'\n                      : 'text-muted-foreground'\n                  }`}>\n                    {item.status === 'completed' && 'Completed'}\n                    {item.status === 'in-progress' && `In Progress (${item.progress})`}\n                    {item.status === 'upcoming' && 'Upcoming'}\n                    {item.status === 'pending' && 'Pending'}\n                  </p>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4042},"client/src/components/dashboard/rating-distribution.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\nexport default function RatingDistribution() {\n  const { data: distribution, isLoading } = useQuery({\n    queryKey: ['/api/dashboard/analytics/rating-distribution'],\n  });\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Rating Distribution</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"h-64 bg-muted/30 rounded-lg animate-pulse\"></div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  // Calculate distribution percentages\n  const total = distribution?.reduce((sum: number, item: any) => sum + parseInt(item.count), 0) || 0;\n  const distributionData = [\n    { rating: \"1\", count: 0, color: \"bg-red-500\" },\n    { rating: \"2\", count: 0, color: \"bg-orange-500\" },\n    { rating: \"3\", count: 0, color: \"bg-blue-500\" },\n    { rating: \"4\", count: 0, color: \"bg-green-500\" },\n    { rating: \"5\", count: 0, color: \"bg-emerald-500\" },\n  ];\n\n  // Update with actual data\n  distribution?.forEach((item: any) => {\n    const index = distributionData.findIndex(d => d.rating === item.rating);\n    if (index !== -1) {\n      distributionData[index].count = parseInt(item.count);\n    }\n  });\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle>Rating Distribution</CardTitle>\n          <Select defaultValue=\"all\">\n            <SelectTrigger className=\"w-[180px]\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Departments</SelectItem>\n              <SelectItem value=\"engineering\">Engineering</SelectItem>\n              <SelectItem value=\"design\">Design</SelectItem>\n              <SelectItem value=\"qa\">QA</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"h-64 bg-muted/30 rounded-lg flex items-center justify-center mb-4\">\n          <div className=\"text-center text-muted-foreground\">\n            <svg className=\"h-12 w-12 mx-auto mb-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\"></path>\n            </svg>\n            <p className=\"text-sm\">Rating Distribution Chart</p>\n          </div>\n        </div>\n        \n        {/* Legend */}\n        <div className=\"grid grid-cols-5 gap-2 text-center\">\n          {distributionData.map((item) => {\n            const percentage = total > 0 ? Math.round((item.count / total) * 100) : 0;\n            return (\n              <div key={item.rating} data-testid={`rating-distribution-${item.rating}`}>\n                <div className={`h-2 w-full ${item.color} rounded mb-1`}></div>\n                <p className=\"text-xs text-muted-foreground\">\n                  {item.rating} ({percentage}%)\n                </p>\n              </div>\n            );\n          })}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3390},"client/src/components/dashboard/recent-activity.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function RecentActivity() {\n  const { data: activities, isLoading } = useQuery({\n    queryKey: ['/api/dashboard/recent-activities'],\n  });\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Recent Activity</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {[...Array(4)].map((_, i) => (\n              <div key={i} className=\"animate-pulse\">\n                <div className=\"h-12 bg-muted/50 rounded\"></div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const getActivityIcon = (action: string) => {\n    switch (action) {\n      case 'self_assessment_completed':\n        return (\n          <svg className=\"h-4 w-4 text-green-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\n          </svg>\n        );\n      case 'feedback_submitted':\n        return (\n          <svg className=\"h-4 w-4 text-blue-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z\"></path>\n          </svg>\n        );\n      case 'meeting_scheduled':\n        return (\n          <svg className=\"h-4 w-4 text-orange-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\n          </svg>\n        );\n      case 'appeal_submitted':\n        return (\n          <svg className=\"h-4 w-4 text-red-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.728-.833-2.498 0L4.316 16.5c-.77.833.192 2.5 1.732 2.5z\"></path>\n          </svg>\n        );\n      default:\n        return (\n          <svg className=\"h-4 w-4 text-gray-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\n          </svg>\n        );\n    }\n  };\n\n  const getActivityBgColor = (action: string) => {\n    switch (action) {\n      case 'self_assessment_completed': return 'bg-green-100';\n      case 'feedback_submitted': return 'bg-blue-100';\n      case 'meeting_scheduled': return 'bg-orange-100';\n      case 'appeal_submitted': return 'bg-red-100';\n      default: return 'bg-gray-100';\n    }\n  };\n\n  const formatTimeAgo = (createdAt: string) => {\n    const now = new Date();\n    const created = new Date(createdAt);\n    const diffMinutes = Math.floor((now.getTime() - created.getTime()) / (1000 * 60));\n    \n    if (diffMinutes < 1) return 'Just now';\n    if (diffMinutes < 60) return `${diffMinutes} minutes ago`;\n    \n    const diffHours = Math.floor(diffMinutes / 60);\n    if (diffHours < 24) return `${diffHours} hours ago`;\n    \n    const diffDays = Math.floor(diffHours / 24);\n    return `${diffDays} days ago`;\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle>Recent Activity</CardTitle>\n          <Button variant=\"ghost\" className=\"text-sm text-primary hover:text-primary/80\" data-testid=\"button-view-all-activity\">\n            View All\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {!activities || activities.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <div className=\"text-muted-foreground\">\n                <svg className=\"h-12 w-12 mx-auto mb-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\n                </svg>\n                <p className=\"text-sm\">No recent activity</p>\n              </div>\n            </div>\n          ) : (\n            activities.map((activity: any, index: number) => (\n              <div \n                key={index} \n                className=\"flex items-start gap-3 pb-4 border-b border-border last:border-b-0 last:pb-0\"\n                data-testid={`activity-${activity.action}-${index}`}\n              >\n                <div className={`h-8 w-8 ${getActivityBgColor(activity.action)} rounded-full flex items-center justify-center flex-shrink-0`}>\n                  {getActivityIcon(activity.action)}\n                </div>\n                <div className=\"flex-1\">\n                  <p className=\"text-sm text-foreground\">\n                    {activity.description}\n                  </p>\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    {formatTimeAgo(activity.createdAt)}\n                  </p>\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5673},"client/src/components/dashboard/stats-overview.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\nexport default function StatsOverview() {\n  const { data: stats, isLoading } = useQuery({\n    queryKey: ['/api/dashboard/stats'],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {[...Array(4)].map((_, i) => (\n          <Card key={i} className=\"animate-pulse\">\n            <CardContent className=\"p-6\">\n              <div className=\"h-20 bg-muted/50 rounded\"></div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  const statsData = [\n    {\n      title: \"Total Employees\",\n      value: stats?.totalEmployees || 0,\n      icon: (\n        <svg className=\"h-6 w-6 text-primary\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z\"></path>\n        </svg>\n      ),\n      bgColor: \"bg-primary/10\",\n      change: \"+12\",\n      changeText: \"from last cycle\",\n    },\n    {\n      title: \"Reviews Completed\",\n      value: stats?.completedReviews || 0,\n      icon: (\n        <svg className=\"h-6 w-6 text-green-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\n        </svg>\n      ),\n      bgColor: \"bg-green-100\",\n      changeText: `${Math.round((stats?.completedReviews || 0) / (stats?.totalEmployees || 1) * 100)}% completion rate`,\n    },\n    {\n      title: \"Pending Approvals\",\n      value: stats?.pendingApprovals || 0,\n      icon: (\n        <svg className=\"h-6 w-6 text-orange-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\n        </svg>\n      ),\n      bgColor: \"bg-orange-100\",\n      changeText: \"Requires attention\",\n      changeColor: \"text-orange-600\",\n    },\n    {\n      title: \"Average Rating\",\n      value: (stats?.averageRating || 0).toFixed(1),\n      icon: (\n        <svg className=\"h-6 w-6 text-blue-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z\"></path>\n        </svg>\n      ),\n      bgColor: \"bg-blue-100\",\n      change: \"+0.2\",\n      changeText: \"vs last year\",\n    },\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n      {statsData.map((stat, index) => (\n        <Card key={index}>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">{stat.title}</p>\n                <p className=\"text-2xl font-bold text-foreground\" data-testid={`stat-${stat.title.toLowerCase().replace(/ /g, '-')}`}>\n                  {stat.value}\n                </p>\n              </div>\n              <div className={`h-12 w-12 ${stat.bgColor} rounded-lg flex items-center justify-center`}>\n                {stat.icon}\n              </div>\n            </div>\n            <div className=\"mt-4 flex items-center gap-2 text-sm\">\n              {stat.change && (\n                <span className=\"text-green-600\">{stat.change}</span>\n              )}\n              <span className={stat.changeColor || \"text-muted-foreground\"}>\n                {stat.changeText}\n              </span>\n            </div>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n}\n","size_bytes":4234},"client/src/components/forms/feedback-form.tsx":{"content":"import { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport { isUnauthorizedError } from '@/lib/authUtils';\nimport { feedbackSchema, type FeedbackData } from '@/lib/types';\nimport { FEEDBACK_CRITERIA, RATING_SCALE } from '@/lib/constants';\n\ninterface FeedbackFormProps {\n  reviewId: string;\n  employeeName: string;\n  employeeRole: string;\n  existingFeedback?: any;\n  onSubmit?: () => void;\n  onCancel?: () => void;\n}\n\nexport default function FeedbackForm({ \n  reviewId, \n  employeeName, \n  employeeRole, \n  existingFeedback, \n  onSubmit, \n  onCancel \n}: FeedbackFormProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<FeedbackData>({\n    resolver: zodResolver(feedbackSchema),\n    defaultValues: {\n      reviewId,\n      technicalCompetence: existingFeedback?.technicalCompetence || '3',\n      communicationSkills: existingFeedback?.communicationSkills || '3',\n      teamCollaboration: existingFeedback?.teamCollaboration || '3',\n      problemSolving: existingFeedback?.problemSolving || '3',\n      leadershipPotential: existingFeedback?.leadershipPotential || '3',\n      reliability: existingFeedback?.reliability || '3',\n      innovation: existingFeedback?.innovation || '3',\n      overallFeedback: existingFeedback?.overallFeedback || '',\n      strengths: existingFeedback?.strengths || '',\n      improvements: existingFeedback?.improvements || '',\n      isAnonymous: existingFeedback?.isAnonymous ?? true,\n    },\n  });\n\n  const mutation = useMutation({\n    mutationFn: async (data: FeedbackData) => {\n      const response = await apiRequest('POST', '/api/feedback', data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Success',\n        description: 'Feedback submitted successfully',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/feedback'] });\n      onSubmit?.();\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: 'Unauthorized',\n          description: 'You are logged out. Logging in again...',\n          variant: 'destructive',\n        });\n        setTimeout(() => {\n          window.location.href = '/api/login';\n        }, 500);\n        return;\n      }\n      toast({\n        title: 'Error',\n        description: 'Failed to submit feedback',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const onFormSubmit = (data: FeedbackData) => {\n    mutation.mutate(data);\n  };\n\n  return (\n    <Card className=\"max-w-4xl mx-auto\">\n      <CardHeader>\n        <CardTitle>360° Feedback</CardTitle>\n        <div className=\"text-sm text-muted-foreground\">\n          <p><strong>Employee:</strong> {employeeName}</p>\n          <p><strong>Role:</strong> {employeeRole}</p>\n        </div>\n      </CardHeader>\n\n      <CardContent>\n        <form onSubmit={form.handleSubmit(onFormSubmit)} className=\"space-y-6\">\n          {/* Rating Criteria */}\n          <div>\n            <h3 className=\"text-lg font-semibold text-foreground mb-4\">Performance Ratings</h3>\n            <p className=\"text-sm text-muted-foreground mb-6\">\n              Please rate the employee on the following criteria using a scale of 1-5:\n            </p>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              {FEEDBACK_CRITERIA.map((criterion) => (\n                <div key={criterion.key} className=\"space-y-2\">\n                  <Label htmlFor={criterion.key}>{criterion.label}</Label>\n                  <Select\n                    value={form.watch(criterion.key as keyof FeedbackData) as string}\n                    onValueChange={(value) => form.setValue(criterion.key as keyof FeedbackData, value as any)}\n                  >\n                    <SelectTrigger data-testid={`select-${criterion.key}`}>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {Object.entries(RATING_SCALE).map(([value, label]) => (\n                        <SelectItem key={value} value={value}>\n                          {value} - {label.split(' (')[0]}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  {form.formState.errors[criterion.key as keyof FeedbackData] && (\n                    <p className=\"text-sm text-destructive\">\n                      {form.formState.errors[criterion.key as keyof FeedbackData]?.message}\n                    </p>\n                  )}\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Overall Feedback */}\n          <div>\n            <Label htmlFor=\"overallFeedback\">Overall Feedback *</Label>\n            <Textarea\n              id=\"overallFeedback\"\n              placeholder=\"Please provide detailed feedback about the employee's performance, contributions, and overall impact... (minimum 50 characters)\"\n              {...form.register('overallFeedback')}\n              rows={6}\n              data-testid=\"textarea-overall-feedback\"\n            />\n            {form.formState.errors.overallFeedback && (\n              <p className=\"text-sm text-destructive mt-1\">\n                {form.formState.errors.overallFeedback.message}\n              </p>\n            )}\n          </div>\n\n          {/* Strengths */}\n          <div>\n            <Label htmlFor=\"strengths\">Key Strengths *</Label>\n            <Textarea\n              id=\"strengths\"\n              placeholder=\"What are this person's key strengths and positive qualities?\"\n              {...form.register('strengths')}\n              rows={4}\n              data-testid=\"textarea-strengths\"\n            />\n            {form.formState.errors.strengths && (\n              <p className=\"text-sm text-destructive mt-1\">\n                {form.formState.errors.strengths.message}\n              </p>\n            )}\n          </div>\n\n          {/* Areas for Improvement */}\n          <div>\n            <Label htmlFor=\"improvements\">Areas for Improvement (Optional)</Label>\n            <Textarea\n              id=\"improvements\"\n              placeholder=\"Are there any areas where this person could improve? Please be constructive.\"\n              {...form.register('improvements')}\n              rows={4}\n              data-testid=\"textarea-improvements\"\n            />\n          </div>\n\n          {/* Anonymous Feedback Option */}\n          <div className=\"flex items-center space-x-2\">\n            <Checkbox\n              id=\"isAnonymous\"\n              checked={form.watch('isAnonymous')}\n              onCheckedChange={(checked) => form.setValue('isAnonymous', !!checked)}\n              data-testid=\"checkbox-anonymous\"\n            />\n            <Label htmlFor=\"isAnonymous\" className=\"text-sm\">\n              Submit this feedback anonymously\n            </Label>\n          </div>\n\n          {/* Information Notice */}\n          <div className=\"bg-muted/50 p-4 rounded-lg\">\n            <div className=\"flex items-start gap-2\">\n              <svg className=\"h-5 w-5 text-blue-500 flex-shrink-0 mt-0.5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\n              </svg>\n              <div className=\"text-sm text-muted-foreground\">\n                <p className=\"font-medium text-foreground mb-1\">Important Notice</p>\n                <ul className=\"space-y-1\">\n                  <li>• Your feedback will be aggregated with others to provide a comprehensive view</li>\n                  <li>• Anonymous feedback cannot be edited once submitted</li>\n                  <li>• Please be honest, constructive, and professional in your feedback</li>\n                  <li>• Focus on specific behaviors and examples rather than personal characteristics</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n\n          {/* Form Actions */}\n          <div className=\"flex justify-end gap-4\">\n            {onCancel && (\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={onCancel}\n                data-testid=\"button-cancel-feedback\"\n              >\n                Cancel\n              </Button>\n            )}\n            <Button\n              type=\"submit\"\n              disabled={mutation.isPending}\n              data-testid=\"button-submit-feedback\"\n            >\n              {mutation.isPending ? 'Submitting...' : 'Submit Feedback'}\n            </Button>\n          </div>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":9241},"client/src/components/forms/review-form.tsx":{"content":"import { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useMutation, useQueryClient, useQuery } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Progress } from '@/components/ui/progress';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport { isUnauthorizedError } from '@/lib/authUtils';\nimport { reviewSchema, type ReviewData } from '@/lib/types';\nimport { RATING_SCALE, RATING_WEIGHTS } from '@/lib/constants';\n\ninterface ReviewFormProps {\n  employeeId: string;\n  userRole: 'l1_manager' | 'l2_manager' | 'l3_manager' | 'founder';\n  existingReview?: any;\n  onSubmit?: () => void;\n  onCancel?: () => void;\n}\n\nexport default function ReviewForm({ \n  employeeId, \n  userRole, \n  existingReview, \n  onSubmit, \n  onCancel \n}: ReviewFormProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [activeTab, setActiveTab] = useState('overview');\n\n  // Fetch employee review data\n  const { data: reviewData, isLoading } = useQuery({\n    queryKey: ['/api/reviews', employeeId],\n    enabled: !!employeeId,\n  });\n\n  // Fetch feedback data\n  const { data: feedbackData } = useQuery({\n    queryKey: ['/api/feedback/review', reviewData?.id],\n    enabled: !!reviewData?.id,\n  });\n\n  const form = useForm<ReviewData>({\n    resolver: zodResolver(reviewSchema),\n    defaultValues: {\n      employeeId,\n      l3Comments: existingReview?.l3Comments || '',\n      l2Comments: existingReview?.l2Comments || '',\n      l1Comments: existingReview?.l1Comments || '',\n      founderComments: existingReview?.founderComments || '',\n      finalRating: existingReview?.finalRating || undefined,\n      finalIncrementPercentage: existingReview?.finalIncrementPercentage || '',\n    },\n  });\n\n  const mutation = useMutation({\n    mutationFn: async (data: ReviewData) => {\n      const response = await apiRequest('PUT', `/api/reviews/${reviewData?.id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Success',\n        description: 'Review updated successfully',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/reviews'] });\n      onSubmit?.();\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: 'Unauthorized',\n          description: 'You are logged out. Logging in again...',\n          variant: 'destructive',\n        });\n        setTimeout(() => {\n          window.location.href = '/api/login';\n        }, 500);\n        return;\n      }\n      toast({\n        title: 'Error',\n        description: 'Failed to update review',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const onFormSubmit = (data: ReviewData) => {\n    mutation.mutate(data);\n  };\n\n  const calculateWeightedRating = () => {\n    if (!reviewData || !feedbackData) return 0;\n\n    const selfAssessmentAvg = reviewData.selfAssessmentData ? 3.5 : 0; // Placeholder calculation\n    const feedbackAvg = feedbackData.length > 0 \n      ? feedbackData.reduce((sum: number, fb: any) => sum + parseFloat(fb.technicalCompetence || 3), 0) / feedbackData.length\n      : 0;\n    const l3Rating = reviewData.l3Rating || 3;\n    const kraRating = 3; // Placeholder\n\n    return (\n      selfAssessmentAvg * RATING_WEIGHTS.self_assessment +\n      feedbackAvg * RATING_WEIGHTS.feedback_360 +\n      l3Rating * RATING_WEIGHTS.l3_input +\n      kraRating * RATING_WEIGHTS.kra_achievement\n    ).toFixed(1);\n  };\n\n  if (isLoading) {\n    return (\n      <Card className=\"max-w-6xl mx-auto\">\n        <CardContent className=\"p-6\">\n          <div className=\"animate-pulse space-y-4\">\n            <div className=\"h-8 bg-muted/50 rounded w-1/3\"></div>\n            <div className=\"h-32 bg-muted/50 rounded\"></div>\n            <div className=\"h-32 bg-muted/50 rounded\"></div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const employee = reviewData?.employee;\n  const canEditRating = userRole === 'l2_manager' || userRole === 'founder';\n  const commentField = {\n    l3_manager: 'l3Comments',\n    l2_manager: 'l2Comments', \n    l1_manager: 'l1Comments',\n    founder: 'founderComments',\n  }[userRole];\n\n  return (\n    <Card className=\"max-w-6xl mx-auto\">\n      <CardHeader>\n        <div className=\"flex justify-between items-start\">\n          <div>\n            <CardTitle>Performance Review</CardTitle>\n            {employee && (\n              <div className=\"text-sm text-muted-foreground mt-2\">\n                <p><strong>Employee:</strong> {employee.firstName} {employee.lastName}</p>\n                <p><strong>Role:</strong> {employee.category?.replace('_', ' ')}</p>\n                <p><strong>Department:</strong> {employee.department}</p>\n              </div>\n            )}\n          </div>\n          <div className=\"text-right\">\n            <Badge variant={reviewData?.status === 'completed' ? 'default' : 'secondary'}>\n              {reviewData?.status?.replace('_', ' ')}\n            </Badge>\n            {reviewData?.finalRating && (\n              <div className=\"mt-2\">\n                <span className=\"text-2xl font-bold text-primary\">\n                  {reviewData.finalRating}\n                </span>\n                <span className=\"text-sm text-muted-foreground\">/5</span>\n              </div>\n            )}\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent>\n        <Tabs value={activeTab} onValueChange={setActiveTab}>\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"overview\" data-testid=\"tab-overview\">Overview</TabsTrigger>\n            <TabsTrigger value=\"feedback\" data-testid=\"tab-feedback\">360° Feedback</TabsTrigger>\n            <TabsTrigger value=\"assessment\" data-testid=\"tab-assessment\">Self Assessment</TabsTrigger>\n            <TabsTrigger value=\"review\" data-testid=\"tab-review\">Review & Rating</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"overview\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              <Card>\n                <CardContent className=\"p-4\">\n                  <h4 className=\"font-semibold text-foreground\">Review Progress</h4>\n                  <Progress value={75} className=\"mt-2\" />\n                  <p className=\"text-sm text-muted-foreground mt-2\">75% Complete</p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-4\">\n                  <h4 className=\"font-semibold text-foreground\">Feedback Received</h4>\n                  <p className=\"text-2xl font-bold text-primary\">{feedbackData?.length || 0}</p>\n                  <p className=\"text-sm text-muted-foreground\">responses</p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-4\">\n                  <h4 className=\"font-semibold text-foreground\">Weighted Rating</h4>\n                  <p className=\"text-2xl font-bold text-primary\">{calculateWeightedRating()}</p>\n                  <p className=\"text-sm text-muted-foreground\">calculated score</p>\n                </CardContent>\n              </Card>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <Card>\n                <CardContent className=\"p-4\">\n                  <h4 className=\"font-semibold text-foreground mb-3\">Rating Breakdown</h4>\n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span>Self Assessment ({Math.round(RATING_WEIGHTS.self_assessment * 100)}%)</span>\n                      <span className=\"font-medium\">3.5/5</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>360° Feedback ({Math.round(RATING_WEIGHTS.feedback_360 * 100)}%)</span>\n                      <span className=\"font-medium\">{feedbackData?.length > 0 ? '3.8/5' : 'Pending'}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>L3 Input ({Math.round(RATING_WEIGHTS.l3_input * 100)}%)</span>\n                      <span className=\"font-medium\">{reviewData?.l3Rating ? `${reviewData.l3Rating}/5` : 'Pending'}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>KRA Achievement ({Math.round(RATING_WEIGHTS.kra_achievement * 100)}%)</span>\n                      <span className=\"font-medium\">3.0/5</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-4\">\n                  <h4 className=\"font-semibold text-foreground mb-3\">Timeline Status</h4>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center gap-2\">\n                      <div className=\"h-3 w-3 bg-green-500 rounded-full\"></div>\n                      <span className=\"text-sm\">Self Assessment - Completed</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <div className=\"h-3 w-3 bg-green-500 rounded-full\"></div>\n                      <span className=\"text-sm\">360° Feedback - Completed</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <div className=\"h-3 w-3 bg-primary rounded-full\"></div>\n                      <span className=\"text-sm\">Manager Review - In Progress</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <div className=\"h-3 w-3 bg-muted rounded-full border-2 border-border\"></div>\n                      <span className=\"text-sm\">1:1 Meeting - Pending</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"feedback\" className=\"space-y-6\">\n            <div>\n              <h3 className=\"text-lg font-semibold text-foreground mb-4\">360° Feedback Summary</h3>\n              {feedbackData && feedbackData.length > 0 ? (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  {feedbackData.map((feedback: any, index: number) => (\n                    <Card key={index}>\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex justify-between items-start mb-3\">\n                          <h4 className=\"font-medium\">\n                            {feedback.isAnonymous ? 'Anonymous Feedback' : feedback.feedbackFrom?.firstName}\n                          </h4>\n                          <Badge variant=\"outline\">\n                            Avg: {(\n                              (parseInt(feedback.technicalCompetence) +\n                               parseInt(feedback.communicationSkills) +\n                               parseInt(feedback.teamCollaboration) +\n                               parseInt(feedback.problemSolving)) / 4\n                            ).toFixed(1)}\n                          </Badge>\n                        </div>\n                        \n                        <div className=\"space-y-2 text-sm\">\n                          <div className=\"flex justify-between\">\n                            <span>Technical:</span>\n                            <span>{feedback.technicalCompetence}/5</span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span>Communication:</span>\n                            <span>{feedback.communicationSkills}/5</span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span>Collaboration:</span>\n                            <span>{feedback.teamCollaboration}/5</span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span>Problem Solving:</span>\n                            <span>{feedback.problemSolving}/5</span>\n                          </div>\n                        </div>\n\n                        {feedback.strengths && (\n                          <div className=\"mt-3\">\n                            <p className=\"text-xs font-medium text-muted-foreground\">Strengths:</p>\n                            <p className=\"text-sm\">{feedback.strengths}</p>\n                          </div>\n                        )}\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <p className=\"text-muted-foreground\">No feedback received yet</p>\n                </div>\n              )}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"assessment\" className=\"space-y-6\">\n            <div>\n              <h3 className=\"text-lg font-semibold text-foreground mb-4\">Self Assessment</h3>\n              {reviewData?.selfAssessmentData ? (\n                <div className=\"space-y-4\">\n                  <Card>\n                    <CardContent className=\"p-4\">\n                      <h4 className=\"font-medium mb-2\">Career Goals</h4>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {reviewData.selfAssessmentData.careerGoals || 'Not provided'}\n                      </p>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardContent className=\"p-4\">\n                      <h4 className=\"font-medium mb-2\">Project Contributions</h4>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {reviewData.selfAssessmentData.projectContributions || 'Not provided'}\n                      </p>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardContent className=\"p-4\">\n                      <h4 className=\"font-medium mb-2\">Key Initiatives</h4>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {reviewData.selfAssessmentData.initiatives || 'Not provided'}\n                      </p>\n                    </CardContent>\n                  </Card>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <Card>\n                      <CardContent className=\"p-4\">\n                        <h4 className=\"font-medium mb-2\">Current CTC</h4>\n                        <p className=\"text-lg font-semibold text-primary\">\n                          ₹{parseInt(reviewData.selfAssessmentData.currentCtc || '0').toLocaleString()}\n                        </p>\n                      </CardContent>\n                    </Card>\n\n                    <Card>\n                      <CardContent className=\"p-4\">\n                        <h4 className=\"font-medium mb-2\">Expected CTC</h4>\n                        <p className=\"text-lg font-semibold text-primary\">\n                          ₹{parseInt(reviewData.selfAssessmentData.expectedCtc || '0').toLocaleString()}\n                        </p>\n                      </CardContent>\n                    </Card>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <p className=\"text-muted-foreground\">Self assessment not completed yet</p>\n                </div>\n              )}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"review\">\n            <form onSubmit={form.handleSubmit(onFormSubmit)} className=\"space-y-6\">\n              <div>\n                <h3 className=\"text-lg font-semibold text-foreground mb-4\">Manager Review</h3>\n                \n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor={commentField}>\n                      {userRole === 'l3_manager' && 'L3 Manager Comments'}\n                      {userRole === 'l2_manager' && 'L2 Manager Comments'}\n                      {userRole === 'l1_manager' && 'L1 Manager Comments'}\n                      {userRole === 'founder' && 'Founder Comments'}\n                    </Label>\n                    <Textarea\n                      id={commentField}\n                      placeholder=\"Provide your detailed review and feedback...\"\n                      {...form.register(commentField as keyof ReviewData)}\n                      rows={6}\n                      data-testid={`textarea-${commentField}`}\n                    />\n                  </div>\n\n                  {canEditRating && (\n                    <>\n                      <div>\n                        <Label htmlFor=\"finalRating\">Final Rating</Label>\n                        <Select\n                          value={form.watch('finalRating') || ''}\n                          onValueChange={(value) => form.setValue('finalRating', value as any)}\n                        >\n                          <SelectTrigger data-testid=\"select-final-rating\">\n                            <SelectValue placeholder=\"Select final rating\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {Object.entries(RATING_SCALE).map(([value, label]) => (\n                              <SelectItem key={value} value={value}>\n                                {value} - {label}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n\n                      <div>\n                        <Label htmlFor=\"finalIncrementPercentage\">Final Increment Percentage</Label>\n                        <Input\n                          id=\"finalIncrementPercentage\"\n                          type=\"number\"\n                          placeholder=\"e.g., 15\"\n                          {...form.register('finalIncrementPercentage')}\n                          data-testid=\"input-final-increment\"\n                        />\n                      </div>\n                    </>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"flex justify-end gap-4\">\n                {onCancel && (\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={onCancel}\n                    data-testid=\"button-cancel-review\"\n                  >\n                    Cancel\n                  </Button>\n                )}\n                <Button\n                  type=\"submit\"\n                  disabled={mutation.isPending}\n                  data-testid=\"button-submit-review\"\n                >\n                  {mutation.isPending ? 'Saving...' : 'Save Review'}\n                </Button>\n              </div>\n            </form>\n          </TabsContent>\n        </Tabs>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":19536},"client/src/components/forms/self-assessment-form.tsx":{"content":"import { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Label } from '@/components/ui/label';\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport { isUnauthorizedError } from '@/lib/authUtils';\nimport { selfAssessmentSchema, type SelfAssessmentData } from '@/lib/types';\nimport { EMPLOYEE_CATEGORIES, SELF_ASSESSMENT_FIELDS, RATING_SCALE } from '@/lib/constants';\n\ninterface SelfAssessmentFormProps {\n  employeeCategory: keyof typeof EMPLOYEE_CATEGORIES;\n  existingData?: any;\n  onSubmit?: () => void;\n}\n\nexport default function SelfAssessmentForm({ \n  employeeCategory, \n  existingData, \n  onSubmit \n}: SelfAssessmentFormProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [step, setStep] = useState(1);\n  const totalSteps = 4;\n\n  const form = useForm<SelfAssessmentData>({\n    resolver: zodResolver(selfAssessmentSchema),\n    defaultValues: {\n      currentCtc: existingData?.currentCtc || '',\n      expectedCtc: existingData?.expectedCtc || '',\n      expectedIncrementPercentage: existingData?.expectedIncrementPercentage || '',\n      careerGoals: existingData?.careerGoals || '',\n      trainingNeeds: existingData?.trainingNeeds || '',\n      workFromHomePreference: existingData?.workFromHomePreference || 'hybrid',\n      projectContributions: existingData?.projectContributions || '',\n      teamCollaboration: existingData?.teamCollaboration || '3',\n      initiatives: existingData?.initiatives || '',\n      challenges: existingData?.challenges || '',\n      areasOfImprovement: existingData?.areasOfImprovement || '',\n      categorySpecificFields: existingData?.categorySpecificFields || {},\n      additionalComments: existingData?.additionalComments || '',\n    },\n  });\n\n  const mutation = useMutation({\n    mutationFn: async (data: SelfAssessmentData) => {\n      const response = await apiRequest('POST', '/api/reviews/self-assessment', data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Success',\n        description: 'Self-assessment submitted successfully',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/reviews/my-review'] });\n      onSubmit?.();\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: 'Unauthorized',\n          description: 'You are logged out. Logging in again...',\n          variant: 'destructive',\n        });\n        setTimeout(() => {\n          window.location.href = '/api/login';\n        }, 500);\n        return;\n      }\n      toast({\n        title: 'Error',\n        description: 'Failed to submit self-assessment',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const onFormSubmit = (data: SelfAssessmentData) => {\n    mutation.mutate(data);\n  };\n\n  const nextStep = async () => {\n    const fieldsToValidate = getFieldsForStep(step);\n    const isValid = await form.trigger(fieldsToValidate as any);\n    \n    if (isValid && step < totalSteps) {\n      setStep(step + 1);\n    }\n  };\n\n  const prevStep = () => {\n    if (step > 1) {\n      setStep(step - 1);\n    }\n  };\n\n  const getFieldsForStep = (currentStep: number) => {\n    switch (currentStep) {\n      case 1:\n        return ['currentCtc', 'expectedCtc', 'expectedIncrementPercentage'];\n      case 2:\n        return ['careerGoals', 'trainingNeeds', 'workFromHomePreference'];\n      case 3:\n        return ['projectContributions', 'teamCollaboration', 'initiatives'];\n      case 4:\n        return ['challenges', 'areasOfImprovement'];\n      default:\n        return [];\n    }\n  };\n\n  const renderStep = () => {\n    switch (step) {\n      case 1:\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"text-center mb-6\">\n              <h3 className=\"text-lg font-semibold text-foreground\">Compensation & Expectations</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Please provide your current compensation details and expectations\n              </p>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <Label htmlFor=\"currentCtc\">Current CTC *</Label>\n                <Input\n                  id=\"currentCtc\"\n                  type=\"number\"\n                  placeholder=\"e.g., 1200000\"\n                  {...form.register('currentCtc')}\n                  data-testid=\"input-current-ctc\"\n                />\n                {form.formState.errors.currentCtc && (\n                  <p className=\"text-sm text-destructive mt-1\">\n                    {form.formState.errors.currentCtc.message}\n                  </p>\n                )}\n              </div>\n\n              <div>\n                <Label htmlFor=\"expectedCtc\">Expected CTC *</Label>\n                <Input\n                  id=\"expectedCtc\"\n                  type=\"number\"\n                  placeholder=\"e.g., 1400000\"\n                  {...form.register('expectedCtc')}\n                  data-testid=\"input-expected-ctc\"\n                />\n                {form.formState.errors.expectedCtc && (\n                  <p className=\"text-sm text-destructive mt-1\">\n                    {form.formState.errors.expectedCtc.message}\n                  </p>\n                )}\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor=\"expectedIncrementPercentage\">Expected Increment Percentage *</Label>\n              <Input\n                id=\"expectedIncrementPercentage\"\n                type=\"number\"\n                placeholder=\"e.g., 20\"\n                {...form.register('expectedIncrementPercentage')}\n                data-testid=\"input-expected-increment\"\n              />\n              {form.formState.errors.expectedIncrementPercentage && (\n                <p className=\"text-sm text-destructive mt-1\">\n                  {form.formState.errors.expectedIncrementPercentage.message}\n                </p>\n              )}\n            </div>\n          </div>\n        );\n\n      case 2:\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"text-center mb-6\">\n              <h3 className=\"text-lg font-semibold text-foreground\">Career Development</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Share your career aspirations and development needs\n              </p>\n            </div>\n\n            <div>\n              <Label htmlFor=\"careerGoals\">Career Goals *</Label>\n              <Textarea\n                id=\"careerGoals\"\n                placeholder=\"Describe your short-term and long-term career goals...\"\n                {...form.register('careerGoals')}\n                rows={4}\n                data-testid=\"textarea-career-goals\"\n              />\n              {form.formState.errors.careerGoals && (\n                <p className=\"text-sm text-destructive mt-1\">\n                  {form.formState.errors.careerGoals.message}\n                </p>\n              )}\n            </div>\n\n            <div>\n              <Label htmlFor=\"trainingNeeds\">Training Needs</Label>\n              <Textarea\n                id=\"trainingNeeds\"\n                placeholder=\"What training or skill development would help you grow?\"\n                {...form.register('trainingNeeds')}\n                rows={3}\n                data-testid=\"textarea-training-needs\"\n              />\n            </div>\n\n            <div>\n              <Label>Work From Home Preference</Label>\n              <RadioGroup\n                value={form.watch('workFromHomePreference')}\n                onValueChange={(value) => form.setValue('workFromHomePreference', value as any)}\n                className=\"mt-2\"\n              >\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"yes\" id=\"wfh-yes\" data-testid=\"radio-wfh-yes\" />\n                  <Label htmlFor=\"wfh-yes\">Yes, prefer remote work</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"no\" id=\"wfh-no\" data-testid=\"radio-wfh-no\" />\n                  <Label htmlFor=\"wfh-no\">No, prefer office work</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"hybrid\" id=\"wfh-hybrid\" data-testid=\"radio-wfh-hybrid\" />\n                  <Label htmlFor=\"wfh-hybrid\">Hybrid (mix of both)</Label>\n                </div>\n              </RadioGroup>\n            </div>\n          </div>\n        );\n\n      case 3:\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"text-center mb-6\">\n              <h3 className=\"text-lg font-semibold text-foreground\">Performance & Contributions</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Highlight your key contributions and collaborative efforts\n              </p>\n            </div>\n\n            <div>\n              <Label htmlFor=\"projectContributions\">Project Contributions *</Label>\n              <Textarea\n                id=\"projectContributions\"\n                placeholder=\"Describe your key project contributions this year...\"\n                {...form.register('projectContributions')}\n                rows={4}\n                data-testid=\"textarea-project-contributions\"\n              />\n              {form.formState.errors.projectContributions && (\n                <p className=\"text-sm text-destructive mt-1\">\n                  {form.formState.errors.projectContributions.message}\n                </p>\n              )}\n            </div>\n\n            <div>\n              <Label htmlFor=\"teamCollaboration\">Team Collaboration Rating (1-5) *</Label>\n              <Select\n                value={form.watch('teamCollaboration')}\n                onValueChange={(value) => form.setValue('teamCollaboration', value as any)}\n              >\n                <SelectTrigger data-testid=\"select-team-collaboration\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {Object.entries(RATING_SCALE).map(([value, label]) => (\n                    <SelectItem key={value} value={value}>\n                      {value} - {label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label htmlFor=\"initiatives\">Initiative and Ownership Examples *</Label>\n              <Textarea\n                id=\"initiatives\"\n                placeholder=\"Share examples of initiatives you took or leadership you demonstrated...\"\n                {...form.register('initiatives')}\n                rows={4}\n                data-testid=\"textarea-initiatives\"\n              />\n              {form.formState.errors.initiatives && (\n                <p className=\"text-sm text-destructive mt-1\">\n                  {form.formState.errors.initiatives.message}\n                </p>\n              )}\n            </div>\n          </div>\n        );\n\n      case 4:\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"text-center mb-6\">\n              <h3 className=\"text-lg font-semibold text-foreground\">Reflection & Growth</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Reflect on challenges and areas for improvement\n              </p>\n            </div>\n\n            <div>\n              <Label htmlFor=\"challenges\">Challenges Faced and Solutions *</Label>\n              <Textarea\n                id=\"challenges\"\n                placeholder=\"Describe key challenges you faced and how you addressed them...\"\n                {...form.register('challenges')}\n                rows={4}\n                data-testid=\"textarea-challenges\"\n              />\n              {form.formState.errors.challenges && (\n                <p className=\"text-sm text-destructive mt-1\">\n                  {form.formState.errors.challenges.message}\n                </p>\n              )}\n            </div>\n\n            <div>\n              <Label htmlFor=\"areasOfImprovement\">Areas of Improvement (Self-identified) *</Label>\n              <Textarea\n                id=\"areasOfImprovement\"\n                placeholder=\"What areas do you think you can improve on?\"\n                {...form.register('areasOfImprovement')}\n                rows={4}\n                data-testid=\"textarea-areas-improvement\"\n              />\n              {form.formState.errors.areasOfImprovement && (\n                <p className=\"text-sm text-destructive mt-1\">\n                  {form.formState.errors.areasOfImprovement.message}\n                </p>\n              )}\n            </div>\n\n            {/* Category-specific fields */}\n            <div>\n              <Label className=\"text-base font-semibold\">\n                {EMPLOYEE_CATEGORIES[employeeCategory]} Specific Assessment\n              </Label>\n              <p className=\"text-sm text-muted-foreground mb-4\">\n                Please rate yourself on the following criteria specific to your role:\n              </p>\n              \n              <div className=\"space-y-4\">\n                {SELF_ASSESSMENT_FIELDS[employeeCategory].map((field, index) => (\n                  <div key={index} className=\"p-4 border border-border rounded-lg\">\n                    <Label className=\"text-sm font-medium\">{field}</Label>\n                    <Select\n                      value={form.watch('categorySpecificFields')?.[field] || ''}\n                      onValueChange={(value) => {\n                        const current = form.watch('categorySpecificFields') || {};\n                        form.setValue('categorySpecificFields', {\n                          ...current,\n                          [field]: value,\n                        });\n                      }}\n                    >\n                      <SelectTrigger className=\"mt-2\" data-testid={`select-category-${index}`}>\n                        <SelectValue placeholder=\"Select rating\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {Object.entries(RATING_SCALE).map(([value, label]) => (\n                          <SelectItem key={value} value={value}>\n                            {value} - {label}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor=\"additionalComments\">Additional Comments</Label>\n              <Textarea\n                id=\"additionalComments\"\n                placeholder=\"Any additional comments or information you'd like to share...\"\n                {...form.register('additionalComments')}\n                rows={3}\n                data-testid=\"textarea-additional-comments\"\n              />\n            </div>\n          </div>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <Card className=\"max-w-4xl mx-auto\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between\">\n          <span>Self Assessment - {EMPLOYEE_CATEGORIES[employeeCategory]}</span>\n          <span className=\"text-sm text-muted-foreground\">\n            Step {step} of {totalSteps}\n          </span>\n        </CardTitle>\n        \n        {/* Progress indicator */}\n        <div className=\"w-full bg-muted rounded-full h-2 mt-4\">\n          <div \n            className=\"bg-primary h-2 rounded-full transition-all duration-300\"\n            style={{ width: `${(step / totalSteps) * 100}%` }}\n          ></div>\n        </div>\n      </CardHeader>\n\n      <CardContent>\n        <form onSubmit={form.handleSubmit(onFormSubmit)}>\n          {renderStep()}\n\n          <div className=\"flex justify-between mt-8\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={prevStep}\n              disabled={step === 1}\n              data-testid=\"button-previous-step\"\n            >\n              Previous\n            </Button>\n\n            <div className=\"flex gap-2\">\n              {step < totalSteps ? (\n                <Button\n                  type=\"button\"\n                  onClick={nextStep}\n                  data-testid=\"button-next-step\"\n                >\n                  Next\n                </Button>\n              ) : (\n                <Button\n                  type=\"submit\"\n                  disabled={mutation.isPending}\n                  data-testid=\"button-submit-assessment\"\n                >\n                  {mutation.isPending ? 'Submitting...' : 'Submit Assessment'}\n                </Button>\n              )}\n            </div>\n          </div>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":17336},"client/src/components/layout/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function Sidebar() {\n  const [location] = useLocation();\n  const { user } = useAuth();\n\n  const initials = user?.firstName && user?.lastName \n    ? `${user.firstName[0]}${user.lastName[0]}` \n    : 'U';\n\n  const userName = user?.firstName && user?.lastName \n    ? `${user.firstName} ${user.lastName}` \n    : 'User';\n\n  const userRole = user?.role?.replace('_', ' ').split(' ').map(word => \n    word.charAt(0).toUpperCase() + word.slice(1)\n  ).join(' ') || 'User';\n\n  const navigation = [\n    {\n      name: 'Dashboard',\n      href: '/',\n      icon: (\n        <svg className=\"h-5 w-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2-2z\"></path>\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M8 5a2 2 0 012-2h4a2 2 0 012 2v2H8V5z\"></path>\n        </svg>\n      ),\n    },\n    {\n      name: 'Reviews',\n      href: '/reviews',\n      icon: (\n        <svg className=\"h-5 w-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012-2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01\"></path>\n        </svg>\n      ),\n      badge: \"12\",\n      badgeVariant: \"destructive\" as const,\n    },\n    {\n      name: 'Employees',\n      href: '/employees',\n      icon: (\n        <svg className=\"h-5 w-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z\"></path>\n        </svg>\n      ),\n    },\n    {\n      name: 'Approvals',\n      href: '/approvals',\n      icon: (\n        <svg className=\"h-5 w-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M8 7V3a2 2 0 012-2h4a2 2 0 012 2v4m-6 0V6a2 2 0 012-2h4a2 2 0 012 2v1m-6 0h6m0 0v1a2 2 0 01-2 2H10a2 2 0 01-2-2V7m6 0V6a2 2 0 00-2-2H10a2 2 0 00-2-2v1\"></path>\n        </svg>\n      ),\n      badge: \"5\",\n      badgeVariant: \"secondary\" as const,\n    },\n    {\n      name: 'Analytics',\n      href: '/analytics',\n      icon: (\n        <svg className=\"h-5 w-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\"></path>\n        </svg>\n      ),\n    },\n    {\n      name: 'Settings',\n      href: '/settings',\n      icon: (\n        <svg className=\"h-5 w-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z\"></path>\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\"></path>\n        </svg>\n      ),\n    },\n  ];\n\n  return (\n    <aside className=\"fixed left-0 top-0 z-40 h-screen w-64 bg-card border-r border-border\">\n      <div className=\"flex h-full flex-col\">\n        {/* Header */}\n        <div className=\"flex items-center gap-3 p-6 border-b border-border\">\n          <div className=\"flex h-10 w-10 items-center justify-center rounded-lg bg-primary text-primary-foreground\">\n            <svg className=\"h-6 w-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\n            </svg>\n          </div>\n          <div>\n            <h1 className=\"font-semibold text-foreground\">IPAS</h1>\n            <p className=\"text-xs text-muted-foreground\">Performance System</p>\n          </div>\n        </div>\n\n        {/* User Profile */}\n        <div className=\"px-6 py-4 border-b border-border\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"h-10 w-10 rounded-full bg-primary/10 flex items-center justify-center\">\n              <span className=\"text-sm font-medium text-primary\" data-testid=\"text-user-initials\">\n                {initials}\n              </span>\n            </div>\n            <div className=\"flex-1\">\n              <p className=\"text-sm font-medium text-foreground\" data-testid=\"text-user-name\">\n                {userName}\n              </p>\n              <p className=\"text-xs text-muted-foreground\" data-testid=\"text-user-role\">\n                {userRole}\n              </p>\n            </div>\n            <button className=\"text-muted-foreground hover:text-foreground\" data-testid=\"button-user-settings\">\n              <svg className=\"h-4 w-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z\"></path>\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\"></path>\n              </svg>\n            </button>\n          </div>\n        </div>\n\n        {/* Navigation Menu */}\n        <nav className=\"flex-1 px-4 py-4 space-y-2\">\n          {navigation.map((item) => {\n            const isActive = location === item.href;\n            return (\n              <Link key={item.name} href={item.href}>\n                <a \n                  className={`flex items-center gap-3 px-3 py-2 rounded-lg font-medium transition-colors ${\n                    isActive \n                      ? 'bg-primary/10 text-primary' \n                      : 'text-muted-foreground hover:text-foreground hover:bg-accent'\n                  }`}\n                  data-testid={`link-${item.name.toLowerCase()}`}\n                >\n                  {item.icon}\n                  {item.name}\n                  {item.badge && (\n                    <span className={`ml-auto text-xs px-2 py-1 rounded-full ${\n                      item.badgeVariant === 'destructive' \n                        ? 'bg-destructive text-destructive-foreground'\n                        : 'bg-orange-500 text-white'\n                    }`}>\n                      {item.badge}\n                    </span>\n                  )}\n                </a>\n              </Link>\n            );\n          })}\n        </nav>\n\n        {/* Footer */}\n        <div className=\"p-4 border-t border-border\">\n          <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n            <span>2024 Review Cycle</span>\n            <span className=\"text-green-600 font-medium\">Active</span>\n          </div>\n        </div>\n      </div>\n    </aside>\n  );\n}\n","size_bytes":8111},"client/src/components/layout/top-header.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface TopHeaderProps {\n  title: string;\n}\n\nexport default function TopHeader({ title }: TopHeaderProps) {\n  const { user } = useAuth();\n\n  const initials = user?.firstName && user?.lastName \n    ? `${user.firstName[0]}${user.lastName[0]}` \n    : 'U';\n\n  return (\n    <header className=\"sticky top-0 z-30 bg-card border-b border-border px-6 py-4\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-4\">\n          <h2 className=\"text-xl font-semibold text-foreground\" data-testid=\"text-page-title\">\n            {title}\n          </h2>\n          <div className=\"hidden md:flex items-center gap-2 text-sm text-muted-foreground\">\n            <span>Review Cycle:</span>\n            <span className=\"font-medium text-foreground\">Annual 2024</span>\n            <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs bg-green-100 text-green-800\">\n              Active\n            </span>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center gap-4\">\n          {/* Search */}\n          <div className=\"relative hidden md:block\">\n            <svg className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"></path>\n            </svg>\n            <input \n              type=\"text\" \n              placeholder=\"Search employees...\" \n              className=\"w-64 pl-10 pr-4 py-2 bg-background border border-border rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-ring\"\n              data-testid=\"input-search\"\n            />\n          </div>\n          \n          {/* Notifications */}\n          <button className=\"relative p-2 text-muted-foreground hover:text-foreground hover:bg-accent rounded-lg\" data-testid=\"button-notifications\">\n            <svg className=\"h-5 w-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9\"></path>\n            </svg>\n            <span className=\"absolute top-1 right-1 h-2 w-2 bg-destructive rounded-full\"></span>\n          </button>\n          \n          {/* Quick Actions */}\n          <Button className=\"px-4 py-2 text-sm font-medium\" data-testid=\"button-quick-action\">\n            Quick Action\n          </Button>\n          \n          {/* User Menu */}\n          <button \n            className=\"flex items-center gap-2 p-2 hover:bg-accent rounded-lg\"\n            onClick={() => window.location.href = '/api/logout'}\n            data-testid=\"button-user-menu\"\n          >\n            <div className=\"h-8 w-8 rounded-full bg-primary/10 flex items-center justify-center\">\n              <span className=\"text-xs font-medium text-primary\">\n                {initials}\n              </span>\n            </div>\n            <svg className=\"h-4 w-4 text-muted-foreground\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M19 9l-7 7-7-7\"></path>\n            </svg>\n          </button>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":3541},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/feedback.tsx":{"content":"import { useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport TopHeader from \"@/components/layout/top-header\";\nimport FeedbackForm from \"@/components/forms/feedback-form\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft, Users } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\nexport default function Feedback() {\n  const { toast } = useToast();\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const [location, setLocation] = useLocation();\n\n  // Query for available feedback targets (team members for 360-feedback)\n  const { data: feedbackTargets, isLoading: targetsLoading } = useQuery({\n    queryKey: ['/api/feedback/targets'],\n    enabled: !!user && isAuthenticated,\n  });\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  if (isLoading || !isAuthenticated || targetsLoading) {\n    return <div className=\"min-h-screen bg-background\"></div>;\n  }\n\n  const handleFormSubmit = () => {\n    toast({\n      title: \"Success\",\n      description: \"Feedback submitted successfully!\",\n    });\n    setLocation('/');\n  };\n\n  const handleBack = () => {\n    setLocation('/');\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Sidebar />\n      <main className=\"ml-64 min-h-screen bg-background\">\n        <TopHeader title=\"360° Feedback\" />\n        <div className=\"p-6\">\n          <div className=\"mb-4\">\n            <Button \n              variant=\"outline\" \n              onClick={handleBack}\n              className=\"mb-4\"\n              data-testid=\"button-back-to-dashboard\"\n            >\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back to Dashboard\n            </Button>\n          </div>\n\n          {feedbackTargets && (feedbackTargets as any[])?.length > 0 ? (\n            <div className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Users className=\"h-5 w-5\" />\n                    360° Feedback - Provide Feedback\n                  </CardTitle>\n                  <p className=\"text-muted-foreground\">\n                    Provide constructive feedback for your team members. This helps create a comprehensive view of performance.\n                  </p>\n                </CardHeader>\n              </Card>\n\n              {(feedbackTargets as any[]).map((target: any, index: number) => (\n                <Card key={target.reviewId} data-testid={`feedback-target-${index}`}>\n                  <CardHeader>\n                    <CardTitle className=\"text-lg\">\n                      Feedback for {target.employeeName}\n                    </CardTitle>\n                    <p className=\"text-muted-foreground\">\n                      {target.employeeRole} • {target.department}\n                    </p>\n                  </CardHeader>\n                  <CardContent>\n                    <FeedbackForm\n                      reviewId={target.reviewId}\n                      employeeName={target.employeeName}\n                      employeeRole={target.employeeRole}\n                      existingFeedback={target.existingFeedback}\n                      onSubmit={handleFormSubmit}\n                    />\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"text-center py-8\">\n                  <Users className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-medium text-muted-foreground\">\n                    No feedback requests available\n                  </h3>\n                  <p className=\"text-sm text-muted-foreground mt-2\">\n                    You currently have no pending 360° feedback requests to complete.\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":4519},"client/src/pages/self-assessment.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport TopHeader from \"@/components/layout/top-header\";\nimport SelfAssessmentForm from \"@/components/forms/self-assessment-form\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\nexport default function SelfAssessment() {\n  const { toast } = useToast();\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const [location, setLocation] = useLocation();\n\n  // Query for current review data\n  const { data: reviewData, isLoading: reviewLoading } = useQuery({\n    queryKey: ['/api/reviews/current'],\n    enabled: !!user && isAuthenticated,\n  });\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  if (isLoading || !isAuthenticated || reviewLoading) {\n    return <div className=\"min-h-screen bg-background\"></div>;\n  }\n\n  const handleFormSubmit = () => {\n    toast({\n      title: \"Success\",\n      description: \"Self-assessment submitted successfully!\",\n    });\n    setLocation('/');\n  };\n\n  const handleBack = () => {\n    setLocation('/');\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Sidebar />\n      <main className=\"ml-64 min-h-screen bg-background\">\n        <TopHeader title=\"Self Assessment\" />\n        <div className=\"p-6\">\n          <div className=\"mb-4\">\n            <Button \n              variant=\"outline\" \n              onClick={handleBack}\n              className=\"mb-4\"\n              data-testid=\"button-back-to-dashboard\"\n            >\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back to Dashboard\n            </Button>\n          </div>\n\n          {reviewData ? (\n            <Card>\n              <CardHeader>\n                <CardTitle>Self Assessment - {(reviewData as any)?.cycleName || '2024 Annual Review'}</CardTitle>\n                <p className=\"text-muted-foreground\">\n                  Complete your self-assessment to provide insights into your performance, goals, and development needs.\n                </p>\n              </CardHeader>\n              <CardContent>\n                <SelfAssessmentForm\n                  employeeCategory={(user as any)?.category || 'software_developer'}\n                  existingData={(reviewData as any)?.selfAssessmentData}\n                  onSubmit={handleFormSubmit}\n                />\n              </CardContent>\n            </Card>\n          ) : (\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"text-center py-8\">\n                  <h3 className=\"text-lg font-medium text-muted-foreground\">\n                    No active review cycle found\n                  </h3>\n                  <p className=\"text-sm text-muted-foreground mt-2\">\n                    Please check with your manager about the current review process.\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":3552}},"version":1}